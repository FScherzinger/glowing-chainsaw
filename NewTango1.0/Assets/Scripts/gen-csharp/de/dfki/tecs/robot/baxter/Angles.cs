/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace de.dfki.tecs.robot.baxter
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Angles : TBase
  {
    private string _left_s0;
    private string _left_s1;
    private string _left_e0;
    private string _left_e1;
    private string _left_w0;
    private string _left_w1;
    private string _left_w2;
    private string _right_s0;
    private string _right_s1;
    private string _right_e0;
    private string _right_e1;
    private string _right_w0;
    private string _right_w1;
    private string _right_w2;

    public string Left_s0
    {
      get
      {
        return _left_s0;
      }
      set
      {
        __isset.left_s0 = true;
        this._left_s0 = value;
      }
    }

    public string Left_s1
    {
      get
      {
        return _left_s1;
      }
      set
      {
        __isset.left_s1 = true;
        this._left_s1 = value;
      }
    }

    public string Left_e0
    {
      get
      {
        return _left_e0;
      }
      set
      {
        __isset.left_e0 = true;
        this._left_e0 = value;
      }
    }

    public string Left_e1
    {
      get
      {
        return _left_e1;
      }
      set
      {
        __isset.left_e1 = true;
        this._left_e1 = value;
      }
    }

    public string Left_w0
    {
      get
      {
        return _left_w0;
      }
      set
      {
        __isset.left_w0 = true;
        this._left_w0 = value;
      }
    }

    public string Left_w1
    {
      get
      {
        return _left_w1;
      }
      set
      {
        __isset.left_w1 = true;
        this._left_w1 = value;
      }
    }

    public string Left_w2
    {
      get
      {
        return _left_w2;
      }
      set
      {
        __isset.left_w2 = true;
        this._left_w2 = value;
      }
    }

    public string Right_s0
    {
      get
      {
        return _right_s0;
      }
      set
      {
        __isset.right_s0 = true;
        this._right_s0 = value;
      }
    }

    public string Right_s1
    {
      get
      {
        return _right_s1;
      }
      set
      {
        __isset.right_s1 = true;
        this._right_s1 = value;
      }
    }

    public string Right_e0
    {
      get
      {
        return _right_e0;
      }
      set
      {
        __isset.right_e0 = true;
        this._right_e0 = value;
      }
    }

    public string Right_e1
    {
      get
      {
        return _right_e1;
      }
      set
      {
        __isset.right_e1 = true;
        this._right_e1 = value;
      }
    }

    public string Right_w0
    {
      get
      {
        return _right_w0;
      }
      set
      {
        __isset.right_w0 = true;
        this._right_w0 = value;
      }
    }

    public string Right_w1
    {
      get
      {
        return _right_w1;
      }
      set
      {
        __isset.right_w1 = true;
        this._right_w1 = value;
      }
    }

    public string Right_w2
    {
      get
      {
        return _right_w2;
      }
      set
      {
        __isset.right_w2 = true;
        this._right_w2 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool left_s0;
      public bool left_s1;
      public bool left_e0;
      public bool left_e1;
      public bool left_w0;
      public bool left_w1;
      public bool left_w2;
      public bool right_s0;
      public bool right_s1;
      public bool right_e0;
      public bool right_e1;
      public bool right_w0;
      public bool right_w1;
      public bool right_w2;
    }

    public Angles() {
      this._left_s0 = "";
      this._left_s1 = "";
      this._left_e0 = "";
      this._left_e1 = "";
      this._left_w0 = "";
      this._left_w1 = "";
      this._left_w2 = "";
      this._right_s0 = "";
      this._right_s1 = "";
      this._right_e0 = "";
      this._right_e1 = "";
      this._right_w0 = "";
      this._right_w1 = "";
      this._right_w2 = "";
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Left_s0 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Left_s1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Left_e0 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Left_e1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Left_w0 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Left_w1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Left_w2 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Right_s0 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Right_s1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Right_e0 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Right_e1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Right_w0 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Right_w1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              Right_w2 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Angles");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Left_s0 != null && __isset.left_s0) {
        field.Name = "left_s0";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Left_s0);
        oprot.WriteFieldEnd();
      }
      if (Left_s1 != null && __isset.left_s1) {
        field.Name = "left_s1";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Left_s1);
        oprot.WriteFieldEnd();
      }
      if (Left_e0 != null && __isset.left_e0) {
        field.Name = "left_e0";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Left_e0);
        oprot.WriteFieldEnd();
      }
      if (Left_e1 != null && __isset.left_e1) {
        field.Name = "left_e1";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Left_e1);
        oprot.WriteFieldEnd();
      }
      if (Left_w0 != null && __isset.left_w0) {
        field.Name = "left_w0";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Left_w0);
        oprot.WriteFieldEnd();
      }
      if (Left_w1 != null && __isset.left_w1) {
        field.Name = "left_w1";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Left_w1);
        oprot.WriteFieldEnd();
      }
      if (Left_w2 != null && __isset.left_w2) {
        field.Name = "left_w2";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Left_w2);
        oprot.WriteFieldEnd();
      }
      if (Right_s0 != null && __isset.right_s0) {
        field.Name = "right_s0";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Right_s0);
        oprot.WriteFieldEnd();
      }
      if (Right_s1 != null && __isset.right_s1) {
        field.Name = "right_s1";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Right_s1);
        oprot.WriteFieldEnd();
      }
      if (Right_e0 != null && __isset.right_e0) {
        field.Name = "right_e0";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Right_e0);
        oprot.WriteFieldEnd();
      }
      if (Right_e1 != null && __isset.right_e1) {
        field.Name = "right_e1";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Right_e1);
        oprot.WriteFieldEnd();
      }
      if (Right_w0 != null && __isset.right_w0) {
        field.Name = "right_w0";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Right_w0);
        oprot.WriteFieldEnd();
      }
      if (Right_w1 != null && __isset.right_w1) {
        field.Name = "right_w1";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Right_w1);
        oprot.WriteFieldEnd();
      }
      if (Right_w2 != null && __isset.right_w2) {
        field.Name = "right_w2";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Right_w2);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Angles(");
      sb.Append("Left_s0: ");
      sb.Append(Left_s0);
      sb.Append(",Left_s1: ");
      sb.Append(Left_s1);
      sb.Append(",Left_e0: ");
      sb.Append(Left_e0);
      sb.Append(",Left_e1: ");
      sb.Append(Left_e1);
      sb.Append(",Left_w0: ");
      sb.Append(Left_w0);
      sb.Append(",Left_w1: ");
      sb.Append(Left_w1);
      sb.Append(",Left_w2: ");
      sb.Append(Left_w2);
      sb.Append(",Right_s0: ");
      sb.Append(Right_s0);
      sb.Append(",Right_s1: ");
      sb.Append(Right_s1);
      sb.Append(",Right_e0: ");
      sb.Append(Right_e0);
      sb.Append(",Right_e1: ");
      sb.Append(Right_e1);
      sb.Append(",Right_w0: ");
      sb.Append(Right_w0);
      sb.Append(",Right_w1: ");
      sb.Append(Right_w1);
      sb.Append(",Right_w2: ");
      sb.Append(Right_w2);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
