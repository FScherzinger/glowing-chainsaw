/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace de.dfki.tecs.robot.baxter
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Orientation : TBase
  {
    private string _Yaw_left;
    private string _Pitch_left;
    private string _Roll_left;
    private string _Yaw_right;
    private string _Pitch_right;
    private string _Roll_right;

    public string Yaw_left
    {
      get
      {
        return _Yaw_left;
      }
      set
      {
        __isset.Yaw_left = true;
        this._Yaw_left = value;
      }
    }

    public string Pitch_left
    {
      get
      {
        return _Pitch_left;
      }
      set
      {
        __isset.Pitch_left = true;
        this._Pitch_left = value;
      }
    }

    public string Roll_left
    {
      get
      {
        return _Roll_left;
      }
      set
      {
        __isset.Roll_left = true;
        this._Roll_left = value;
      }
    }

    public string Yaw_right
    {
      get
      {
        return _Yaw_right;
      }
      set
      {
        __isset.Yaw_right = true;
        this._Yaw_right = value;
      }
    }

    public string Pitch_right
    {
      get
      {
        return _Pitch_right;
      }
      set
      {
        __isset.Pitch_right = true;
        this._Pitch_right = value;
      }
    }

    public string Roll_right
    {
      get
      {
        return _Roll_right;
      }
      set
      {
        __isset.Roll_right = true;
        this._Roll_right = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Yaw_left;
      public bool Pitch_left;
      public bool Roll_left;
      public bool Yaw_right;
      public bool Pitch_right;
      public bool Roll_right;
    }

    public Orientation() {
      this._Yaw_left = "";
      this._Pitch_left = "";
      this._Roll_left = "";
      this._Yaw_right = "";
      this._Pitch_right = "";
      this._Roll_right = "";
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Yaw_left = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Pitch_left = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Roll_left = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Yaw_right = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Pitch_right = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Roll_right = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Orientation");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Yaw_left != null && __isset.Yaw_left) {
        field.Name = "Yaw_left";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Yaw_left);
        oprot.WriteFieldEnd();
      }
      if (Pitch_left != null && __isset.Pitch_left) {
        field.Name = "Pitch_left";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Pitch_left);
        oprot.WriteFieldEnd();
      }
      if (Roll_left != null && __isset.Roll_left) {
        field.Name = "Roll_left";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Roll_left);
        oprot.WriteFieldEnd();
      }
      if (Yaw_right != null && __isset.Yaw_right) {
        field.Name = "Yaw_right";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Yaw_right);
        oprot.WriteFieldEnd();
      }
      if (Pitch_right != null && __isset.Pitch_right) {
        field.Name = "Pitch_right";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Pitch_right);
        oprot.WriteFieldEnd();
      }
      if (Roll_right != null && __isset.Roll_right) {
        field.Name = "Roll_right";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Roll_right);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Orientation(");
      sb.Append("Yaw_left: ");
      sb.Append(Yaw_left);
      sb.Append(",Pitch_left: ");
      sb.Append(Pitch_left);
      sb.Append(",Roll_left: ");
      sb.Append(Roll_left);
      sb.Append(",Yaw_right: ");
      sb.Append(Yaw_right);
      sb.Append(",Pitch_right: ");
      sb.Append(Pitch_right);
      sb.Append(",Roll_right: ");
      sb.Append(Roll_right);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
