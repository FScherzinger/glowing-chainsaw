/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace de.dfki.tecs.robot.baxter
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PickAndPlaceEvent : TBase
  {
    private Limb _limb;
    private Position _initial_pos;
    private Position _final_pos;
    private Orientation _initial_ori;
    private Orientation _final_ori;
    private Speed _speed;
    private Angles _angls;
    private Reference_sys _mode;
    private Kinematics _kin;

    /// <summary>
    /// 
    /// <seealso cref="Limb"/>
    /// </summary>
    public Limb Limb
    {
      get
      {
        return _limb;
      }
      set
      {
        __isset.limb = true;
        this._limb = value;
      }
    }

    public Position Initial_pos
    {
      get
      {
        return _initial_pos;
      }
      set
      {
        __isset.initial_pos = true;
        this._initial_pos = value;
      }
    }

    public Position Final_pos
    {
      get
      {
        return _final_pos;
      }
      set
      {
        __isset.final_pos = true;
        this._final_pos = value;
      }
    }

    public Orientation Initial_ori
    {
      get
      {
        return _initial_ori;
      }
      set
      {
        __isset.initial_ori = true;
        this._initial_ori = value;
      }
    }

    public Orientation Final_ori
    {
      get
      {
        return _final_ori;
      }
      set
      {
        __isset.final_ori = true;
        this._final_ori = value;
      }
    }

    public Speed Speed
    {
      get
      {
        return _speed;
      }
      set
      {
        __isset.speed = true;
        this._speed = value;
      }
    }

    public Angles Angls
    {
      get
      {
        return _angls;
      }
      set
      {
        __isset.angls = true;
        this._angls = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="Reference_sys"/>
    /// </summary>
    public Reference_sys Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="Kinematics"/>
    /// </summary>
    public Kinematics Kin
    {
      get
      {
        return _kin;
      }
      set
      {
        __isset.kin = true;
        this._kin = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool limb;
      public bool initial_pos;
      public bool final_pos;
      public bool initial_ori;
      public bool final_ori;
      public bool speed;
      public bool angls;
      public bool mode;
      public bool kin;
    }

    public PickAndPlaceEvent() {
      this._limb = (Limb)1;
      this._initial_pos = new Position();
      this._final_pos = new Position();
      this._initial_ori = new Orientation();
      this._final_ori = new Orientation();
      this._speed = new Speed();
      this._angls = new Angles();
      this._mode = (Reference_sys)0;
      this._kin = (Kinematics)0;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Limb = (Limb)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Initial_pos = new Position();
              Initial_pos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Final_pos = new Position();
              Final_pos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Initial_ori = new Orientation();
              Initial_ori.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Final_ori = new Orientation();
              Final_ori.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              Speed = new Speed();
              Speed.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              Angls = new Angles();
              Angls.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Mode = (Reference_sys)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Kin = (Kinematics)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PickAndPlaceEvent");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.limb) {
        field.Name = "limb";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Limb);
        oprot.WriteFieldEnd();
      }
      if (Initial_pos != null && __isset.initial_pos) {
        field.Name = "initial_pos";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Initial_pos.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Final_pos != null && __isset.final_pos) {
        field.Name = "final_pos";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Final_pos.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Initial_ori != null && __isset.initial_ori) {
        field.Name = "initial_ori";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Initial_ori.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Final_ori != null && __isset.final_ori) {
        field.Name = "final_ori";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Final_ori.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Speed != null && __isset.speed) {
        field.Name = "speed";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        Speed.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Angls != null && __isset.angls) {
        field.Name = "angls";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        Angls.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.mode) {
        field.Name = "mode";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Mode);
        oprot.WriteFieldEnd();
      }
      if (__isset.kin) {
        field.Name = "kin";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Kin);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PickAndPlaceEvent(");
      sb.Append("Limb: ");
      sb.Append(Limb);
      sb.Append(",Initial_pos: ");
      sb.Append(Initial_pos== null ? "<null>" : Initial_pos.ToString());
      sb.Append(",Final_pos: ");
      sb.Append(Final_pos== null ? "<null>" : Final_pos.ToString());
      sb.Append(",Initial_ori: ");
      sb.Append(Initial_ori== null ? "<null>" : Initial_ori.ToString());
      sb.Append(",Final_ori: ");
      sb.Append(Final_ori== null ? "<null>" : Final_ori.ToString());
      sb.Append(",Speed: ");
      sb.Append(Speed== null ? "<null>" : Speed.ToString());
      sb.Append(",Angls: ");
      sb.Append(Angls== null ? "<null>" : Angls.ToString());
      sb.Append(",Mode: ");
      sb.Append(Mode);
      sb.Append(",Kin: ");
      sb.Append(Kin);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
