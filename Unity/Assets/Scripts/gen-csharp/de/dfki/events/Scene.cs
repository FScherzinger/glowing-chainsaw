/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace de.dfki.events
{
  public partial class Scene {
    public interface Iface {
      bool Annotate(Annotation an);
      #if SILVERLIGHT
      IAsyncResult Begin_Annotate(AsyncCallback callback, object state, Annotation an);
      bool End_Annotate(IAsyncResult asyncResult);
      #endif
      bool Note(Note n);
      #if SILVERLIGHT
      IAsyncResult Begin_Note(AsyncCallback callback, object state, Note n);
      bool End_Note(IAsyncResult asyncResult);
      #endif
      bool UpdateAnnotation(int objectId, Annotation an);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateAnnotation(AsyncCallback callback, object state, int objectId, Annotation an);
      bool End_UpdateAnnotation(IAsyncResult asyncResult);
      #endif
      bool UpdateNote(Position pos, Note n);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateNote(AsyncCallback callback, object state, Position pos, Note n);
      bool End_UpdateNote(IAsyncResult asyncResult);
      #endif
      bool DeleteAnnotation(int objectId, int id);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteAnnotation(AsyncCallback callback, object state, int objectId, int id);
      bool End_DeleteAnnotation(IAsyncResult asyncResult);
      #endif
      bool DeleteNote(Position pos, int id);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteNote(AsyncCallback callback, object state, Position pos, int id);
      bool End_DeleteNote(IAsyncResult asyncResult);
      #endif
      bool Can_Interact(int id);
      #if SILVERLIGHT
      IAsyncResult Begin_Can_Interact(AsyncCallback callback, object state, int id);
      bool End_Can_Interact(IAsyncResult asyncResult);
      #endif
      bool LockGameObject(int id);
      #if SILVERLIGHT
      IAsyncResult Begin_LockGameObject(AsyncCallback callback, object state, int id);
      bool End_LockGameObject(IAsyncResult asyncResult);
      #endif
      bool Move(PositionEvent e);
      #if SILVERLIGHT
      IAsyncResult Begin_Move(AsyncCallback callback, object state, PositionEvent e);
      bool End_Move(IAsyncResult asyncResult);
      #endif
      bool Move_And_Rotate(PositionEvent e, DirectionEvent d);
      #if SILVERLIGHT
      IAsyncResult Begin_Move_And_Rotate(AsyncCallback callback, object state, PositionEvent e, DirectionEvent d);
      bool End_Move_And_Rotate(IAsyncResult asyncResult);
      #endif
      ObjType getObjType(int id);
      #if SILVERLIGHT
      IAsyncResult Begin_getObjType(AsyncCallback callback, object state, int id);
      ObjType End_getObjType(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Annotate(AsyncCallback callback, object state, Annotation an)
      {
        return send_Annotate(callback, state, an);
      }

      public bool End_Annotate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Annotate();
      }

      #endif

      public bool Annotate(Annotation an)
      {
        #if !SILVERLIGHT
        send_Annotate(an);
        return recv_Annotate();

        #else
        var asyncResult = Begin_Annotate(null, null, an);
        return End_Annotate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Annotate(AsyncCallback callback, object state, Annotation an)
      #else
      public void send_Annotate(Annotation an)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Annotate", TMessageType.Call, seqid_));
        Annotate_args args = new Annotate_args();
        args.An = an;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Annotate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Annotate_result result = new Annotate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Annotate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Note(AsyncCallback callback, object state, Note n)
      {
        return send_Note(callback, state, n);
      }

      public bool End_Note(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Note();
      }

      #endif

      public bool Note(Note n)
      {
        #if !SILVERLIGHT
        send_Note(n);
        return recv_Note();

        #else
        var asyncResult = Begin_Note(null, null, n);
        return End_Note(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Note(AsyncCallback callback, object state, Note n)
      #else
      public void send_Note(Note n)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Note", TMessageType.Call, seqid_));
        Note_args args = new Note_args();
        args.N = n;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Note()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Note_result result = new Note_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Note failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateAnnotation(AsyncCallback callback, object state, int objectId, Annotation an)
      {
        return send_UpdateAnnotation(callback, state, objectId, an);
      }

      public bool End_UpdateAnnotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdateAnnotation();
      }

      #endif

      public bool UpdateAnnotation(int objectId, Annotation an)
      {
        #if !SILVERLIGHT
        send_UpdateAnnotation(objectId, an);
        return recv_UpdateAnnotation();

        #else
        var asyncResult = Begin_UpdateAnnotation(null, null, objectId, an);
        return End_UpdateAnnotation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateAnnotation(AsyncCallback callback, object state, int objectId, Annotation an)
      #else
      public void send_UpdateAnnotation(int objectId, Annotation an)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateAnnotation", TMessageType.Call, seqid_));
        UpdateAnnotation_args args = new UpdateAnnotation_args();
        args.ObjectId = objectId;
        args.An = an;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_UpdateAnnotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateAnnotation_result result = new UpdateAnnotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateAnnotation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateNote(AsyncCallback callback, object state, Position pos, Note n)
      {
        return send_UpdateNote(callback, state, pos, n);
      }

      public bool End_UpdateNote(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdateNote();
      }

      #endif

      public bool UpdateNote(Position pos, Note n)
      {
        #if !SILVERLIGHT
        send_UpdateNote(pos, n);
        return recv_UpdateNote();

        #else
        var asyncResult = Begin_UpdateNote(null, null, pos, n);
        return End_UpdateNote(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateNote(AsyncCallback callback, object state, Position pos, Note n)
      #else
      public void send_UpdateNote(Position pos, Note n)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateNote", TMessageType.Call, seqid_));
        UpdateNote_args args = new UpdateNote_args();
        args.Pos = pos;
        args.N = n;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_UpdateNote()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateNote_result result = new UpdateNote_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateNote failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteAnnotation(AsyncCallback callback, object state, int objectId, int id)
      {
        return send_DeleteAnnotation(callback, state, objectId, id);
      }

      public bool End_DeleteAnnotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteAnnotation();
      }

      #endif

      public bool DeleteAnnotation(int objectId, int id)
      {
        #if !SILVERLIGHT
        send_DeleteAnnotation(objectId, id);
        return recv_DeleteAnnotation();

        #else
        var asyncResult = Begin_DeleteAnnotation(null, null, objectId, id);
        return End_DeleteAnnotation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteAnnotation(AsyncCallback callback, object state, int objectId, int id)
      #else
      public void send_DeleteAnnotation(int objectId, int id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteAnnotation", TMessageType.Call, seqid_));
        DeleteAnnotation_args args = new DeleteAnnotation_args();
        args.ObjectId = objectId;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DeleteAnnotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteAnnotation_result result = new DeleteAnnotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteAnnotation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteNote(AsyncCallback callback, object state, Position pos, int id)
      {
        return send_DeleteNote(callback, state, pos, id);
      }

      public bool End_DeleteNote(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DeleteNote();
      }

      #endif

      public bool DeleteNote(Position pos, int id)
      {
        #if !SILVERLIGHT
        send_DeleteNote(pos, id);
        return recv_DeleteNote();

        #else
        var asyncResult = Begin_DeleteNote(null, null, pos, id);
        return End_DeleteNote(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteNote(AsyncCallback callback, object state, Position pos, int id)
      #else
      public void send_DeleteNote(Position pos, int id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteNote", TMessageType.Call, seqid_));
        DeleteNote_args args = new DeleteNote_args();
        args.Pos = pos;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DeleteNote()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteNote_result result = new DeleteNote_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteNote failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Can_Interact(AsyncCallback callback, object state, int id)
      {
        return send_Can_Interact(callback, state, id);
      }

      public bool End_Can_Interact(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Can_Interact();
      }

      #endif

      public bool Can_Interact(int id)
      {
        #if !SILVERLIGHT
        send_Can_Interact(id);
        return recv_Can_Interact();

        #else
        var asyncResult = Begin_Can_Interact(null, null, id);
        return End_Can_Interact(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Can_Interact(AsyncCallback callback, object state, int id)
      #else
      public void send_Can_Interact(int id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Can_Interact", TMessageType.Call, seqid_));
        Can_Interact_args args = new Can_Interact_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Can_Interact()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Can_Interact_result result = new Can_Interact_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Can_Interact failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LockGameObject(AsyncCallback callback, object state, int id)
      {
        return send_LockGameObject(callback, state, id);
      }

      public bool End_LockGameObject(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_LockGameObject();
      }

      #endif

      public bool LockGameObject(int id)
      {
        #if !SILVERLIGHT
        send_LockGameObject(id);
        return recv_LockGameObject();

        #else
        var asyncResult = Begin_LockGameObject(null, null, id);
        return End_LockGameObject(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LockGameObject(AsyncCallback callback, object state, int id)
      #else
      public void send_LockGameObject(int id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LockGameObject", TMessageType.Call, seqid_));
        LockGameObject_args args = new LockGameObject_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_LockGameObject()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LockGameObject_result result = new LockGameObject_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LockGameObject failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Move(AsyncCallback callback, object state, PositionEvent e)
      {
        return send_Move(callback, state, e);
      }

      public bool End_Move(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Move();
      }

      #endif

      public bool Move(PositionEvent e)
      {
        #if !SILVERLIGHT
        send_Move(e);
        return recv_Move();

        #else
        var asyncResult = Begin_Move(null, null, e);
        return End_Move(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Move(AsyncCallback callback, object state, PositionEvent e)
      #else
      public void send_Move(PositionEvent e)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Move", TMessageType.Call, seqid_));
        Move_args args = new Move_args();
        args.E = e;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Move()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Move_result result = new Move_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Move failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Move_And_Rotate(AsyncCallback callback, object state, PositionEvent e, DirectionEvent d)
      {
        return send_Move_And_Rotate(callback, state, e, d);
      }

      public bool End_Move_And_Rotate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Move_And_Rotate();
      }

      #endif

      public bool Move_And_Rotate(PositionEvent e, DirectionEvent d)
      {
        #if !SILVERLIGHT
        send_Move_And_Rotate(e, d);
        return recv_Move_And_Rotate();

        #else
        var asyncResult = Begin_Move_And_Rotate(null, null, e, d);
        return End_Move_And_Rotate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Move_And_Rotate(AsyncCallback callback, object state, PositionEvent e, DirectionEvent d)
      #else
      public void send_Move_And_Rotate(PositionEvent e, DirectionEvent d)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Move_And_Rotate", TMessageType.Call, seqid_));
        Move_And_Rotate_args args = new Move_And_Rotate_args();
        args.E = e;
        args.D = d;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Move_And_Rotate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Move_And_Rotate_result result = new Move_And_Rotate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Move_And_Rotate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getObjType(AsyncCallback callback, object state, int id)
      {
        return send_getObjType(callback, state, id);
      }

      public ObjType End_getObjType(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getObjType();
      }

      #endif

      public ObjType getObjType(int id)
      {
        #if !SILVERLIGHT
        send_getObjType(id);
        return recv_getObjType();

        #else
        var asyncResult = Begin_getObjType(null, null, id);
        return End_getObjType(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getObjType(AsyncCallback callback, object state, int id)
      #else
      public void send_getObjType(int id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getObjType", TMessageType.Call, seqid_));
        getObjType_args args = new getObjType_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ObjType recv_getObjType()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getObjType_result result = new getObjType_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getObjType failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Annotate"] = Annotate_Process;
        processMap_["Note"] = Note_Process;
        processMap_["UpdateAnnotation"] = UpdateAnnotation_Process;
        processMap_["UpdateNote"] = UpdateNote_Process;
        processMap_["DeleteAnnotation"] = DeleteAnnotation_Process;
        processMap_["DeleteNote"] = DeleteNote_Process;
        processMap_["Can_Interact"] = Can_Interact_Process;
        processMap_["LockGameObject"] = LockGameObject_Process;
        processMap_["Move"] = Move_Process;
        processMap_["Move_And_Rotate"] = Move_And_Rotate_Process;
        processMap_["getObjType"] = getObjType_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Annotate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Annotate_args args = new Annotate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Annotate_result result = new Annotate_result();
        result.Success = iface_.Annotate(args.An);
        oprot.WriteMessageBegin(new TMessage("Annotate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Note_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Note_args args = new Note_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Note_result result = new Note_result();
        result.Success = iface_.Note(args.N);
        oprot.WriteMessageBegin(new TMessage("Note", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateAnnotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateAnnotation_args args = new UpdateAnnotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateAnnotation_result result = new UpdateAnnotation_result();
        result.Success = iface_.UpdateAnnotation(args.ObjectId, args.An);
        oprot.WriteMessageBegin(new TMessage("UpdateAnnotation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateNote_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateNote_args args = new UpdateNote_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateNote_result result = new UpdateNote_result();
        result.Success = iface_.UpdateNote(args.Pos, args.N);
        oprot.WriteMessageBegin(new TMessage("UpdateNote", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteAnnotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteAnnotation_args args = new DeleteAnnotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteAnnotation_result result = new DeleteAnnotation_result();
        result.Success = iface_.DeleteAnnotation(args.ObjectId, args.Id);
        oprot.WriteMessageBegin(new TMessage("DeleteAnnotation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteNote_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteNote_args args = new DeleteNote_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteNote_result result = new DeleteNote_result();
        result.Success = iface_.DeleteNote(args.Pos, args.Id);
        oprot.WriteMessageBegin(new TMessage("DeleteNote", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Can_Interact_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Can_Interact_args args = new Can_Interact_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Can_Interact_result result = new Can_Interact_result();
        result.Success = iface_.Can_Interact(args.Id);
        oprot.WriteMessageBegin(new TMessage("Can_Interact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LockGameObject_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LockGameObject_args args = new LockGameObject_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LockGameObject_result result = new LockGameObject_result();
        result.Success = iface_.LockGameObject(args.Id);
        oprot.WriteMessageBegin(new TMessage("LockGameObject", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Move_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Move_args args = new Move_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Move_result result = new Move_result();
        result.Success = iface_.Move(args.E);
        oprot.WriteMessageBegin(new TMessage("Move", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Move_And_Rotate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Move_And_Rotate_args args = new Move_And_Rotate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Move_And_Rotate_result result = new Move_And_Rotate_result();
        result.Success = iface_.Move_And_Rotate(args.E, args.D);
        oprot.WriteMessageBegin(new TMessage("Move_And_Rotate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getObjType_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getObjType_args args = new getObjType_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getObjType_result result = new getObjType_result();
        result.Success = iface_.getObjType(args.Id);
        oprot.WriteMessageBegin(new TMessage("getObjType", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Annotate_args : TBase
    {
      private Annotation _an;

      public Annotation An
      {
        get
        {
          return _an;
        }
        set
        {
          __isset.an = true;
          this._an = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool an;
      }

      public Annotate_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  An = new Annotation();
                  An.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Annotate_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (An != null && __isset.an) {
            field.Name = "an";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            An.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Annotate_args(");
        bool __first = true;
        if (An != null && __isset.an) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("An: ");
          __sb.Append(An);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Annotate_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Annotate_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Annotate_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Annotate_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Note_args : TBase
    {
      private Note _n;

      public Note N
      {
        get
        {
          return _n;
        }
        set
        {
          __isset.n = true;
          this._n = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool n;
      }

      public Note_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  N = new Note();
                  N.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Note_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (N != null && __isset.n) {
            field.Name = "n";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            N.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Note_args(");
        bool __first = true;
        if (N != null && __isset.n) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("N: ");
          __sb.Append(N);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Note_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Note_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Note_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Note_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateAnnotation_args : TBase
    {
      private int _objectId;
      private Annotation _an;

      public int ObjectId
      {
        get
        {
          return _objectId;
        }
        set
        {
          __isset.objectId = true;
          this._objectId = value;
        }
      }

      public Annotation An
      {
        get
        {
          return _an;
        }
        set
        {
          __isset.an = true;
          this._an = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool objectId;
        public bool an;
      }

      public UpdateAnnotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ObjectId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  An = new Annotation();
                  An.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateAnnotation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.objectId) {
            field.Name = "objectId";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ObjectId);
            oprot.WriteFieldEnd();
          }
          if (An != null && __isset.an) {
            field.Name = "an";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            An.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateAnnotation_args(");
        bool __first = true;
        if (__isset.objectId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ObjectId: ");
          __sb.Append(ObjectId);
        }
        if (An != null && __isset.an) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("An: ");
          __sb.Append(An);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateAnnotation_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpdateAnnotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateAnnotation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateAnnotation_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateNote_args : TBase
    {
      private Position _pos;
      private Note _n;

      public Position Pos
      {
        get
        {
          return _pos;
        }
        set
        {
          __isset.pos = true;
          this._pos = value;
        }
      }

      public Note N
      {
        get
        {
          return _n;
        }
        set
        {
          __isset.n = true;
          this._n = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool pos;
        public bool n;
      }

      public UpdateNote_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Pos = new Position();
                  Pos.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  N = new Note();
                  N.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateNote_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Pos != null && __isset.pos) {
            field.Name = "pos";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Pos.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (N != null && __isset.n) {
            field.Name = "n";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            N.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateNote_args(");
        bool __first = true;
        if (Pos != null && __isset.pos) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Pos: ");
          __sb.Append(Pos== null ? "<null>" : Pos.ToString());
        }
        if (N != null && __isset.n) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("N: ");
          __sb.Append(N);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateNote_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpdateNote_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateNote_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateNote_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteAnnotation_args : TBase
    {
      private int _objectId;
      private int _id;

      public int ObjectId
      {
        get
        {
          return _objectId;
        }
        set
        {
          __isset.objectId = true;
          this._objectId = value;
        }
      }

      public int Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool objectId;
        public bool id;
      }

      public DeleteAnnotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ObjectId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Id = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteAnnotation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.objectId) {
            field.Name = "objectId";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ObjectId);
            oprot.WriteFieldEnd();
          }
          if (__isset.id) {
            field.Name = "id";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteAnnotation_args(");
        bool __first = true;
        if (__isset.objectId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ObjectId: ");
          __sb.Append(ObjectId);
        }
        if (__isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteAnnotation_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteAnnotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteAnnotation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteAnnotation_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteNote_args : TBase
    {
      private Position _pos;
      private int _id;

      public Position Pos
      {
        get
        {
          return _pos;
        }
        set
        {
          __isset.pos = true;
          this._pos = value;
        }
      }

      public int Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool pos;
        public bool id;
      }

      public DeleteNote_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Pos = new Position();
                  Pos.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Id = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteNote_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Pos != null && __isset.pos) {
            field.Name = "pos";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Pos.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.id) {
            field.Name = "id";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteNote_args(");
        bool __first = true;
        if (Pos != null && __isset.pos) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Pos: ");
          __sb.Append(Pos== null ? "<null>" : Pos.ToString());
        }
        if (__isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeleteNote_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DeleteNote_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeleteNote_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeleteNote_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Can_Interact_args : TBase
    {
      private int _id;

      public int Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public Can_Interact_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Id = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Can_Interact_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.id) {
            field.Name = "id";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Can_Interact_args(");
        bool __first = true;
        if (__isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Can_Interact_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Can_Interact_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Can_Interact_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Can_Interact_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LockGameObject_args : TBase
    {
      private int _id;

      public int Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public LockGameObject_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Id = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("LockGameObject_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.id) {
            field.Name = "id";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("LockGameObject_args(");
        bool __first = true;
        if (__isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LockGameObject_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public LockGameObject_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("LockGameObject_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("LockGameObject_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Move_args : TBase
    {
      private PositionEvent _e;

      public PositionEvent E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public Move_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new PositionEvent();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Move_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (E != null && __isset.e) {
            field.Name = "e";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Move_args(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Move_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Move_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Move_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Move_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Move_And_Rotate_args : TBase
    {
      private PositionEvent _e;
      private DirectionEvent _d;

      public PositionEvent E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public DirectionEvent D
      {
        get
        {
          return _d;
        }
        set
        {
          __isset.d = true;
          this._d = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
        public bool d;
      }

      public Move_And_Rotate_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new PositionEvent();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  D = new DirectionEvent();
                  D.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Move_And_Rotate_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (E != null && __isset.e) {
            field.Name = "e";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (D != null && __isset.d) {
            field.Name = "d";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            D.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Move_And_Rotate_args(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        if (D != null && __isset.d) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("D: ");
          __sb.Append(D== null ? "<null>" : D.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Move_And_Rotate_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Move_And_Rotate_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Move_And_Rotate_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Move_And_Rotate_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getObjType_args : TBase
    {
      private int _id;

      public int Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public getObjType_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Id = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getObjType_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.id) {
            field.Name = "id";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getObjType_args(");
        bool __first = true;
        if (__isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getObjType_result : TBase
    {
      private ObjType _success;

      /// <summary>
      /// 
      /// <seealso cref="ObjType"/>
      /// </summary>
      public ObjType Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getObjType_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = (ObjType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getObjType_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getObjType_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
