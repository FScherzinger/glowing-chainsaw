#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Limb:
  BOTH = 0
  LEFT = 1
  RIGHT = 2

  _VALUES_TO_NAMES = {
    0: "BOTH",
    1: "LEFT",
    2: "RIGHT",
  }

  _NAMES_TO_VALUES = {
    "BOTH": 0,
    "LEFT": 1,
    "RIGHT": 2,
  }

class Reference_sys:
  ABSOLUTE = 0
  RELATIVE = 1

  _VALUES_TO_NAMES = {
    0: "ABSOLUTE",
    1: "RELATIVE",
  }

  _NAMES_TO_VALUES = {
    "ABSOLUTE": 0,
    "RELATIVE": 1,
  }

class Kinematics:
  INVERSE = 0
  FORWARD = 1

  _VALUES_TO_NAMES = {
    0: "INVERSE",
    1: "FORWARD",
  }

  _NAMES_TO_VALUES = {
    "INVERSE": 0,
    "FORWARD": 1,
  }

class Gripper_state:
  OPEN = 1
  CLOSE = 0

  _VALUES_TO_NAMES = {
    1: "OPEN",
    0: "CLOSE",
  }

  _NAMES_TO_VALUES = {
    "OPEN": 1,
    "CLOSE": 0,
  }

class ImageType:
  DFKI_LOGO = 0
  ACTION_TRIGGERED = 1
  SELECT_SURFACE = 2
  SYSTEM_READY = 3
  SYSTEM_SHUT_DOWN = 4
  PICK_ITEM = 5
  PICK_RESET = 6

  _VALUES_TO_NAMES = {
    0: "DFKI_LOGO",
    1: "ACTION_TRIGGERED",
    2: "SELECT_SURFACE",
    3: "SYSTEM_READY",
    4: "SYSTEM_SHUT_DOWN",
    5: "PICK_ITEM",
    6: "PICK_RESET",
  }

  _NAMES_TO_VALUES = {
    "DFKI_LOGO": 0,
    "ACTION_TRIGGERED": 1,
    "SELECT_SURFACE": 2,
    "SYSTEM_READY": 3,
    "SYSTEM_SHUT_DOWN": 4,
    "PICK_ITEM": 5,
    "PICK_RESET": 6,
  }


class Angles:
  """
  Attributes:
   - left_s0
   - left_s1
   - left_e0
   - left_e1
   - left_w0
   - left_w1
   - left_w2
   - right_s0
   - right_s1
   - right_e0
   - right_e1
   - right_w0
   - right_w1
   - right_w2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'left_s0', None, "", ), # 1
    (2, TType.STRING, 'left_s1', None, "", ), # 2
    (3, TType.STRING, 'left_e0', None, "", ), # 3
    (4, TType.STRING, 'left_e1', None, "", ), # 4
    (5, TType.STRING, 'left_w0', None, "", ), # 5
    (6, TType.STRING, 'left_w1', None, "", ), # 6
    (7, TType.STRING, 'left_w2', None, "", ), # 7
    (8, TType.STRING, 'right_s0', None, "", ), # 8
    (9, TType.STRING, 'right_s1', None, "", ), # 9
    (10, TType.STRING, 'right_e0', None, "", ), # 10
    (11, TType.STRING, 'right_e1', None, "", ), # 11
    (12, TType.STRING, 'right_w0', None, "", ), # 12
    (13, TType.STRING, 'right_w1', None, "", ), # 13
    (14, TType.STRING, 'right_w2', None, "", ), # 14
  )

  def __init__(self, left_s0=thrift_spec[1][4], left_s1=thrift_spec[2][4], left_e0=thrift_spec[3][4], left_e1=thrift_spec[4][4], left_w0=thrift_spec[5][4], left_w1=thrift_spec[6][4], left_w2=thrift_spec[7][4], right_s0=thrift_spec[8][4], right_s1=thrift_spec[9][4], right_e0=thrift_spec[10][4], right_e1=thrift_spec[11][4], right_w0=thrift_spec[12][4], right_w1=thrift_spec[13][4], right_w2=thrift_spec[14][4],):
    self.left_s0 = left_s0
    self.left_s1 = left_s1
    self.left_e0 = left_e0
    self.left_e1 = left_e1
    self.left_w0 = left_w0
    self.left_w1 = left_w1
    self.left_w2 = left_w2
    self.right_s0 = right_s0
    self.right_s1 = right_s1
    self.right_e0 = right_e0
    self.right_e1 = right_e1
    self.right_w0 = right_w0
    self.right_w1 = right_w1
    self.right_w2 = right_w2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.left_s0 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.left_s1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.left_e0 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.left_e1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.left_w0 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.left_w1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.left_w2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.right_s0 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.right_s1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.right_e0 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.right_e1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.right_w0 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.right_w1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.right_w2 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Angles')
    if self.left_s0 is not None:
      oprot.writeFieldBegin('left_s0', TType.STRING, 1)
      oprot.writeString(self.left_s0)
      oprot.writeFieldEnd()
    if self.left_s1 is not None:
      oprot.writeFieldBegin('left_s1', TType.STRING, 2)
      oprot.writeString(self.left_s1)
      oprot.writeFieldEnd()
    if self.left_e0 is not None:
      oprot.writeFieldBegin('left_e0', TType.STRING, 3)
      oprot.writeString(self.left_e0)
      oprot.writeFieldEnd()
    if self.left_e1 is not None:
      oprot.writeFieldBegin('left_e1', TType.STRING, 4)
      oprot.writeString(self.left_e1)
      oprot.writeFieldEnd()
    if self.left_w0 is not None:
      oprot.writeFieldBegin('left_w0', TType.STRING, 5)
      oprot.writeString(self.left_w0)
      oprot.writeFieldEnd()
    if self.left_w1 is not None:
      oprot.writeFieldBegin('left_w1', TType.STRING, 6)
      oprot.writeString(self.left_w1)
      oprot.writeFieldEnd()
    if self.left_w2 is not None:
      oprot.writeFieldBegin('left_w2', TType.STRING, 7)
      oprot.writeString(self.left_w2)
      oprot.writeFieldEnd()
    if self.right_s0 is not None:
      oprot.writeFieldBegin('right_s0', TType.STRING, 8)
      oprot.writeString(self.right_s0)
      oprot.writeFieldEnd()
    if self.right_s1 is not None:
      oprot.writeFieldBegin('right_s1', TType.STRING, 9)
      oprot.writeString(self.right_s1)
      oprot.writeFieldEnd()
    if self.right_e0 is not None:
      oprot.writeFieldBegin('right_e0', TType.STRING, 10)
      oprot.writeString(self.right_e0)
      oprot.writeFieldEnd()
    if self.right_e1 is not None:
      oprot.writeFieldBegin('right_e1', TType.STRING, 11)
      oprot.writeString(self.right_e1)
      oprot.writeFieldEnd()
    if self.right_w0 is not None:
      oprot.writeFieldBegin('right_w0', TType.STRING, 12)
      oprot.writeString(self.right_w0)
      oprot.writeFieldEnd()
    if self.right_w1 is not None:
      oprot.writeFieldBegin('right_w1', TType.STRING, 13)
      oprot.writeString(self.right_w1)
      oprot.writeFieldEnd()
    if self.right_w2 is not None:
      oprot.writeFieldBegin('right_w2', TType.STRING, 14)
      oprot.writeString(self.right_w2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Position:
  """
  Attributes:
   - X_left
   - Y_left
   - Z_left
   - X_right
   - Y_right
   - Z_right
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'X_left', None, "", ), # 1
    (2, TType.STRING, 'Y_left', None, "", ), # 2
    (3, TType.STRING, 'Z_left', None, "", ), # 3
    (4, TType.STRING, 'X_right', None, "", ), # 4
    (5, TType.STRING, 'Y_right', None, "", ), # 5
    (6, TType.STRING, 'Z_right', None, "", ), # 6
  )

  def __init__(self, X_left=thrift_spec[1][4], Y_left=thrift_spec[2][4], Z_left=thrift_spec[3][4], X_right=thrift_spec[4][4], Y_right=thrift_spec[5][4], Z_right=thrift_spec[6][4],):
    self.X_left = X_left
    self.Y_left = Y_left
    self.Z_left = Z_left
    self.X_right = X_right
    self.Y_right = Y_right
    self.Z_right = Z_right

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.X_left = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Y_left = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.Z_left = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.X_right = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.Y_right = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.Z_right = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Position')
    if self.X_left is not None:
      oprot.writeFieldBegin('X_left', TType.STRING, 1)
      oprot.writeString(self.X_left)
      oprot.writeFieldEnd()
    if self.Y_left is not None:
      oprot.writeFieldBegin('Y_left', TType.STRING, 2)
      oprot.writeString(self.Y_left)
      oprot.writeFieldEnd()
    if self.Z_left is not None:
      oprot.writeFieldBegin('Z_left', TType.STRING, 3)
      oprot.writeString(self.Z_left)
      oprot.writeFieldEnd()
    if self.X_right is not None:
      oprot.writeFieldBegin('X_right', TType.STRING, 4)
      oprot.writeString(self.X_right)
      oprot.writeFieldEnd()
    if self.Y_right is not None:
      oprot.writeFieldBegin('Y_right', TType.STRING, 5)
      oprot.writeString(self.Y_right)
      oprot.writeFieldEnd()
    if self.Z_right is not None:
      oprot.writeFieldBegin('Z_right', TType.STRING, 6)
      oprot.writeString(self.Z_right)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Orientation:
  """
  Attributes:
   - Yaw_left
   - Pitch_left
   - Roll_left
   - Yaw_right
   - Pitch_right
   - Roll_right
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Yaw_left', None, "", ), # 1
    (2, TType.STRING, 'Pitch_left', None, "", ), # 2
    (3, TType.STRING, 'Roll_left', None, "", ), # 3
    (4, TType.STRING, 'Yaw_right', None, "", ), # 4
    (5, TType.STRING, 'Pitch_right', None, "", ), # 5
    (6, TType.STRING, 'Roll_right', None, "", ), # 6
  )

  def __init__(self, Yaw_left=thrift_spec[1][4], Pitch_left=thrift_spec[2][4], Roll_left=thrift_spec[3][4], Yaw_right=thrift_spec[4][4], Pitch_right=thrift_spec[5][4], Roll_right=thrift_spec[6][4],):
    self.Yaw_left = Yaw_left
    self.Pitch_left = Pitch_left
    self.Roll_left = Roll_left
    self.Yaw_right = Yaw_right
    self.Pitch_right = Pitch_right
    self.Roll_right = Roll_right

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Yaw_left = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Pitch_left = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.Roll_left = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.Yaw_right = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.Pitch_right = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.Roll_right = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Orientation')
    if self.Yaw_left is not None:
      oprot.writeFieldBegin('Yaw_left', TType.STRING, 1)
      oprot.writeString(self.Yaw_left)
      oprot.writeFieldEnd()
    if self.Pitch_left is not None:
      oprot.writeFieldBegin('Pitch_left', TType.STRING, 2)
      oprot.writeString(self.Pitch_left)
      oprot.writeFieldEnd()
    if self.Roll_left is not None:
      oprot.writeFieldBegin('Roll_left', TType.STRING, 3)
      oprot.writeString(self.Roll_left)
      oprot.writeFieldEnd()
    if self.Yaw_right is not None:
      oprot.writeFieldBegin('Yaw_right', TType.STRING, 4)
      oprot.writeString(self.Yaw_right)
      oprot.writeFieldEnd()
    if self.Pitch_right is not None:
      oprot.writeFieldBegin('Pitch_right', TType.STRING, 5)
      oprot.writeString(self.Pitch_right)
      oprot.writeFieldEnd()
    if self.Roll_right is not None:
      oprot.writeFieldBegin('Roll_right', TType.STRING, 6)
      oprot.writeString(self.Roll_right)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Speed:
  """
  Attributes:
   - Speed_left
   - Speed_right
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Speed_left', None, "0.2", ), # 1
    (2, TType.STRING, 'Speed_right', None, "0.2", ), # 2
  )

  def __init__(self, Speed_left=thrift_spec[1][4], Speed_right=thrift_spec[2][4],):
    self.Speed_left = Speed_left
    self.Speed_right = Speed_right

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Speed_left = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Speed_right = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Speed')
    if self.Speed_left is not None:
      oprot.writeFieldBegin('Speed_left', TType.STRING, 1)
      oprot.writeString(self.Speed_left)
      oprot.writeFieldEnd()
    if self.Speed_right is not None:
      oprot.writeFieldBegin('Speed_right', TType.STRING, 2)
      oprot.writeString(self.Speed_right)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DoneEvent:
  """
  Attributes:
   - message
   - error
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, "Done!", ), # 1
    (2, TType.BOOL, 'error', None, False, ), # 2
  )

  def __init__(self, message=thrift_spec[1][4], error=thrift_spec[2][4],):
    self.message = message
    self.error = error

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.error = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DoneEvent')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.BOOL, 2)
      oprot.writeBool(self.error)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    if self.error is None:
      raise TProtocol.TProtocolException(message='Required field error is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PickEvent:
  """
  Attributes:
   - limb
   - pos
   - ori
   - speed
   - angls
   - mode
   - kin
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'limb', None,     1, ), # 1
    (2, TType.STRUCT, 'pos', (Position, Position.thrift_spec), Position(**{
    }), ), # 2
    (3, TType.STRUCT, 'ori', (Orientation, Orientation.thrift_spec), Orientation(**{
    }), ), # 3
    (4, TType.STRUCT, 'speed', (Speed, Speed.thrift_spec), Speed(**{
    }), ), # 4
    (5, TType.STRUCT, 'angls', (Angles, Angles.thrift_spec), Angles(**{
    }), ), # 5
    (6, TType.I32, 'mode', None,     0, ), # 6
    (7, TType.I32, 'kin', None,     0, ), # 7
  )

  def __init__(self, limb=thrift_spec[1][4], pos=thrift_spec[2][4], ori=thrift_spec[3][4], speed=thrift_spec[4][4], angls=thrift_spec[5][4], mode=thrift_spec[6][4], kin=thrift_spec[7][4],):
    self.limb = limb
    if pos is self.thrift_spec[2][4]:
      pos = Position(**{
    })
    self.pos = pos
    if ori is self.thrift_spec[3][4]:
      ori = Orientation(**{
    })
    self.ori = ori
    if speed is self.thrift_spec[4][4]:
      speed = Speed(**{
    })
    self.speed = speed
    if angls is self.thrift_spec[5][4]:
      angls = Angles(**{
    })
    self.angls = angls
    self.mode = mode
    self.kin = kin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.limb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.pos = Position()
          self.pos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ori = Orientation()
          self.ori.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.speed = Speed()
          self.speed.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.angls = Angles()
          self.angls.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.mode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.kin = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PickEvent')
    if self.limb is not None:
      oprot.writeFieldBegin('limb', TType.I32, 1)
      oprot.writeI32(self.limb)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.STRUCT, 2)
      self.pos.write(oprot)
      oprot.writeFieldEnd()
    if self.ori is not None:
      oprot.writeFieldBegin('ori', TType.STRUCT, 3)
      self.ori.write(oprot)
      oprot.writeFieldEnd()
    if self.speed is not None:
      oprot.writeFieldBegin('speed', TType.STRUCT, 4)
      self.speed.write(oprot)
      oprot.writeFieldEnd()
    if self.angls is not None:
      oprot.writeFieldBegin('angls', TType.STRUCT, 5)
      self.angls.write(oprot)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I32, 6)
      oprot.writeI32(self.mode)
      oprot.writeFieldEnd()
    if self.kin is not None:
      oprot.writeFieldBegin('kin', TType.I32, 7)
      oprot.writeI32(self.kin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.limb is None:
      raise TProtocol.TProtocolException(message='Required field limb is unset!')
    if self.pos is None:
      raise TProtocol.TProtocolException(message='Required field pos is unset!')
    if self.ori is None:
      raise TProtocol.TProtocolException(message='Required field ori is unset!')
    if self.speed is None:
      raise TProtocol.TProtocolException(message='Required field speed is unset!')
    if self.angls is None:
      raise TProtocol.TProtocolException(message='Required field angls is unset!')
    if self.mode is None:
      raise TProtocol.TProtocolException(message='Required field mode is unset!')
    if self.kin is None:
      raise TProtocol.TProtocolException(message='Required field kin is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlaceEvent:
  """
  Attributes:
   - limb
   - pos
   - ori
   - speed
   - angls
   - mode
   - kin
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'limb', None,     1, ), # 1
    (2, TType.STRUCT, 'pos', (Position, Position.thrift_spec), Position(**{
    }), ), # 2
    (3, TType.STRUCT, 'ori', (Orientation, Orientation.thrift_spec), Orientation(**{
    }), ), # 3
    (4, TType.STRUCT, 'speed', (Speed, Speed.thrift_spec), Speed(**{
    }), ), # 4
    (5, TType.STRUCT, 'angls', (Angles, Angles.thrift_spec), Angles(**{
    }), ), # 5
    (6, TType.I32, 'mode', None,     0, ), # 6
    (7, TType.I32, 'kin', None,     0, ), # 7
  )

  def __init__(self, limb=thrift_spec[1][4], pos=thrift_spec[2][4], ori=thrift_spec[3][4], speed=thrift_spec[4][4], angls=thrift_spec[5][4], mode=thrift_spec[6][4], kin=thrift_spec[7][4],):
    self.limb = limb
    if pos is self.thrift_spec[2][4]:
      pos = Position(**{
    })
    self.pos = pos
    if ori is self.thrift_spec[3][4]:
      ori = Orientation(**{
    })
    self.ori = ori
    if speed is self.thrift_spec[4][4]:
      speed = Speed(**{
    })
    self.speed = speed
    if angls is self.thrift_spec[5][4]:
      angls = Angles(**{
    })
    self.angls = angls
    self.mode = mode
    self.kin = kin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.limb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.pos = Position()
          self.pos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ori = Orientation()
          self.ori.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.speed = Speed()
          self.speed.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.angls = Angles()
          self.angls.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.mode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.kin = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlaceEvent')
    if self.limb is not None:
      oprot.writeFieldBegin('limb', TType.I32, 1)
      oprot.writeI32(self.limb)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.STRUCT, 2)
      self.pos.write(oprot)
      oprot.writeFieldEnd()
    if self.ori is not None:
      oprot.writeFieldBegin('ori', TType.STRUCT, 3)
      self.ori.write(oprot)
      oprot.writeFieldEnd()
    if self.speed is not None:
      oprot.writeFieldBegin('speed', TType.STRUCT, 4)
      self.speed.write(oprot)
      oprot.writeFieldEnd()
    if self.angls is not None:
      oprot.writeFieldBegin('angls', TType.STRUCT, 5)
      self.angls.write(oprot)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I32, 6)
      oprot.writeI32(self.mode)
      oprot.writeFieldEnd()
    if self.kin is not None:
      oprot.writeFieldBegin('kin', TType.I32, 7)
      oprot.writeI32(self.kin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.limb is None:
      raise TProtocol.TProtocolException(message='Required field limb is unset!')
    if self.pos is None:
      raise TProtocol.TProtocolException(message='Required field pos is unset!')
    if self.ori is None:
      raise TProtocol.TProtocolException(message='Required field ori is unset!')
    if self.speed is None:
      raise TProtocol.TProtocolException(message='Required field speed is unset!')
    if self.angls is None:
      raise TProtocol.TProtocolException(message='Required field angls is unset!')
    if self.mode is None:
      raise TProtocol.TProtocolException(message='Required field mode is unset!')
    if self.kin is None:
      raise TProtocol.TProtocolException(message='Required field kin is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PointEvent:
  """
  Attributes:
   - limb
   - pos
   - ori
   - speed
   - angls
   - mode
   - kin
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'limb', None,     1, ), # 1
    (2, TType.STRUCT, 'pos', (Position, Position.thrift_spec), Position(**{
    }), ), # 2
    (3, TType.STRUCT, 'ori', (Orientation, Orientation.thrift_spec), Orientation(**{
    }), ), # 3
    (4, TType.STRUCT, 'speed', (Speed, Speed.thrift_spec), Speed(**{
    }), ), # 4
    (5, TType.STRUCT, 'angls', (Angles, Angles.thrift_spec), Angles(**{
    }), ), # 5
    (6, TType.I32, 'mode', None,     0, ), # 6
    (7, TType.I32, 'kin', None,     0, ), # 7
  )

  def __init__(self, limb=thrift_spec[1][4], pos=thrift_spec[2][4], ori=thrift_spec[3][4], speed=thrift_spec[4][4], angls=thrift_spec[5][4], mode=thrift_spec[6][4], kin=thrift_spec[7][4],):
    self.limb = limb
    if pos is self.thrift_spec[2][4]:
      pos = Position(**{
    })
    self.pos = pos
    if ori is self.thrift_spec[3][4]:
      ori = Orientation(**{
    })
    self.ori = ori
    if speed is self.thrift_spec[4][4]:
      speed = Speed(**{
    })
    self.speed = speed
    if angls is self.thrift_spec[5][4]:
      angls = Angles(**{
    })
    self.angls = angls
    self.mode = mode
    self.kin = kin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.limb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.pos = Position()
          self.pos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ori = Orientation()
          self.ori.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.speed = Speed()
          self.speed.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.angls = Angles()
          self.angls.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.mode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.kin = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PointEvent')
    if self.limb is not None:
      oprot.writeFieldBegin('limb', TType.I32, 1)
      oprot.writeI32(self.limb)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.STRUCT, 2)
      self.pos.write(oprot)
      oprot.writeFieldEnd()
    if self.ori is not None:
      oprot.writeFieldBegin('ori', TType.STRUCT, 3)
      self.ori.write(oprot)
      oprot.writeFieldEnd()
    if self.speed is not None:
      oprot.writeFieldBegin('speed', TType.STRUCT, 4)
      self.speed.write(oprot)
      oprot.writeFieldEnd()
    if self.angls is not None:
      oprot.writeFieldBegin('angls', TType.STRUCT, 5)
      self.angls.write(oprot)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I32, 6)
      oprot.writeI32(self.mode)
      oprot.writeFieldEnd()
    if self.kin is not None:
      oprot.writeFieldBegin('kin', TType.I32, 7)
      oprot.writeI32(self.kin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.limb is None:
      raise TProtocol.TProtocolException(message='Required field limb is unset!')
    if self.pos is None:
      raise TProtocol.TProtocolException(message='Required field pos is unset!')
    if self.ori is None:
      raise TProtocol.TProtocolException(message='Required field ori is unset!')
    if self.speed is None:
      raise TProtocol.TProtocolException(message='Required field speed is unset!')
    if self.angls is None:
      raise TProtocol.TProtocolException(message='Required field angls is unset!')
    if self.mode is None:
      raise TProtocol.TProtocolException(message='Required field mode is unset!')
    if self.kin is None:
      raise TProtocol.TProtocolException(message='Required field kin is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveArmEvent:
  """
  Attributes:
   - limb
   - pos
   - ori
   - speed
   - angls
   - mode
   - kin
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'limb', None,     1, ), # 1
    (2, TType.STRUCT, 'pos', (Position, Position.thrift_spec), Position(**{
    }), ), # 2
    (3, TType.STRUCT, 'ori', (Orientation, Orientation.thrift_spec), Orientation(**{
    }), ), # 3
    (4, TType.STRUCT, 'speed', (Speed, Speed.thrift_spec), Speed(**{
    }), ), # 4
    (5, TType.STRUCT, 'angls', (Angles, Angles.thrift_spec), Angles(**{
    }), ), # 5
    (6, TType.I32, 'mode', None,     0, ), # 6
    (7, TType.I32, 'kin', None,     0, ), # 7
  )

  def __init__(self, limb=thrift_spec[1][4], pos=thrift_spec[2][4], ori=thrift_spec[3][4], speed=thrift_spec[4][4], angls=thrift_spec[5][4], mode=thrift_spec[6][4], kin=thrift_spec[7][4],):
    self.limb = limb
    if pos is self.thrift_spec[2][4]:
      pos = Position(**{
    })
    self.pos = pos
    if ori is self.thrift_spec[3][4]:
      ori = Orientation(**{
    })
    self.ori = ori
    if speed is self.thrift_spec[4][4]:
      speed = Speed(**{
    })
    self.speed = speed
    if angls is self.thrift_spec[5][4]:
      angls = Angles(**{
    })
    self.angls = angls
    self.mode = mode
    self.kin = kin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.limb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.pos = Position()
          self.pos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ori = Orientation()
          self.ori.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.speed = Speed()
          self.speed.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.angls = Angles()
          self.angls.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.mode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.kin = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveArmEvent')
    if self.limb is not None:
      oprot.writeFieldBegin('limb', TType.I32, 1)
      oprot.writeI32(self.limb)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.STRUCT, 2)
      self.pos.write(oprot)
      oprot.writeFieldEnd()
    if self.ori is not None:
      oprot.writeFieldBegin('ori', TType.STRUCT, 3)
      self.ori.write(oprot)
      oprot.writeFieldEnd()
    if self.speed is not None:
      oprot.writeFieldBegin('speed', TType.STRUCT, 4)
      self.speed.write(oprot)
      oprot.writeFieldEnd()
    if self.angls is not None:
      oprot.writeFieldBegin('angls', TType.STRUCT, 5)
      self.angls.write(oprot)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I32, 6)
      oprot.writeI32(self.mode)
      oprot.writeFieldEnd()
    if self.kin is not None:
      oprot.writeFieldBegin('kin', TType.I32, 7)
      oprot.writeI32(self.kin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.limb is None:
      raise TProtocol.TProtocolException(message='Required field limb is unset!')
    if self.pos is None:
      raise TProtocol.TProtocolException(message='Required field pos is unset!')
    if self.ori is None:
      raise TProtocol.TProtocolException(message='Required field ori is unset!')
    if self.speed is None:
      raise TProtocol.TProtocolException(message='Required field speed is unset!')
    if self.angls is None:
      raise TProtocol.TProtocolException(message='Required field angls is unset!')
    if self.mode is None:
      raise TProtocol.TProtocolException(message='Required field mode is unset!')
    if self.kin is None:
      raise TProtocol.TProtocolException(message='Required field kin is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PickAndPlaceEvent:
  """
  Attributes:
   - limb
   - initial_pos
   - final_pos
   - initial_ori
   - final_ori
   - speed
   - angls
   - mode
   - kin
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'limb', None,     1, ), # 1
    (2, TType.STRUCT, 'initial_pos', (Position, Position.thrift_spec), Position(**{
    }), ), # 2
    (3, TType.STRUCT, 'final_pos', (Position, Position.thrift_spec), Position(**{
    }), ), # 3
    (4, TType.STRUCT, 'initial_ori', (Orientation, Orientation.thrift_spec), Orientation(**{
    }), ), # 4
    (5, TType.STRUCT, 'final_ori', (Orientation, Orientation.thrift_spec), Orientation(**{
    }), ), # 5
    (6, TType.STRUCT, 'speed', (Speed, Speed.thrift_spec), Speed(**{
    }), ), # 6
    (7, TType.STRUCT, 'angls', (Angles, Angles.thrift_spec), Angles(**{
    }), ), # 7
    (8, TType.I32, 'mode', None,     0, ), # 8
    (9, TType.I32, 'kin', None,     0, ), # 9
  )

  def __init__(self, limb=thrift_spec[1][4], initial_pos=thrift_spec[2][4], final_pos=thrift_spec[3][4], initial_ori=thrift_spec[4][4], final_ori=thrift_spec[5][4], speed=thrift_spec[6][4], angls=thrift_spec[7][4], mode=thrift_spec[8][4], kin=thrift_spec[9][4],):
    self.limb = limb
    if initial_pos is self.thrift_spec[2][4]:
      initial_pos = Position(**{
    })
    self.initial_pos = initial_pos
    if final_pos is self.thrift_spec[3][4]:
      final_pos = Position(**{
    })
    self.final_pos = final_pos
    if initial_ori is self.thrift_spec[4][4]:
      initial_ori = Orientation(**{
    })
    self.initial_ori = initial_ori
    if final_ori is self.thrift_spec[5][4]:
      final_ori = Orientation(**{
    })
    self.final_ori = final_ori
    if speed is self.thrift_spec[6][4]:
      speed = Speed(**{
    })
    self.speed = speed
    if angls is self.thrift_spec[7][4]:
      angls = Angles(**{
    })
    self.angls = angls
    self.mode = mode
    self.kin = kin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.limb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.initial_pos = Position()
          self.initial_pos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.final_pos = Position()
          self.final_pos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.initial_ori = Orientation()
          self.initial_ori.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.final_ori = Orientation()
          self.final_ori.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.speed = Speed()
          self.speed.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.angls = Angles()
          self.angls.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.mode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.kin = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PickAndPlaceEvent')
    if self.limb is not None:
      oprot.writeFieldBegin('limb', TType.I32, 1)
      oprot.writeI32(self.limb)
      oprot.writeFieldEnd()
    if self.initial_pos is not None:
      oprot.writeFieldBegin('initial_pos', TType.STRUCT, 2)
      self.initial_pos.write(oprot)
      oprot.writeFieldEnd()
    if self.final_pos is not None:
      oprot.writeFieldBegin('final_pos', TType.STRUCT, 3)
      self.final_pos.write(oprot)
      oprot.writeFieldEnd()
    if self.initial_ori is not None:
      oprot.writeFieldBegin('initial_ori', TType.STRUCT, 4)
      self.initial_ori.write(oprot)
      oprot.writeFieldEnd()
    if self.final_ori is not None:
      oprot.writeFieldBegin('final_ori', TType.STRUCT, 5)
      self.final_ori.write(oprot)
      oprot.writeFieldEnd()
    if self.speed is not None:
      oprot.writeFieldBegin('speed', TType.STRUCT, 6)
      self.speed.write(oprot)
      oprot.writeFieldEnd()
    if self.angls is not None:
      oprot.writeFieldBegin('angls', TType.STRUCT, 7)
      self.angls.write(oprot)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I32, 8)
      oprot.writeI32(self.mode)
      oprot.writeFieldEnd()
    if self.kin is not None:
      oprot.writeFieldBegin('kin', TType.I32, 9)
      oprot.writeI32(self.kin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.limb is None:
      raise TProtocol.TProtocolException(message='Required field limb is unset!')
    if self.initial_pos is None:
      raise TProtocol.TProtocolException(message='Required field initial_pos is unset!')
    if self.final_pos is None:
      raise TProtocol.TProtocolException(message='Required field final_pos is unset!')
    if self.initial_ori is None:
      raise TProtocol.TProtocolException(message='Required field initial_ori is unset!')
    if self.final_ori is None:
      raise TProtocol.TProtocolException(message='Required field final_ori is unset!')
    if self.speed is None:
      raise TProtocol.TProtocolException(message='Required field speed is unset!')
    if self.angls is None:
      raise TProtocol.TProtocolException(message='Required field angls is unset!')
    if self.mode is None:
      raise TProtocol.TProtocolException(message='Required field mode is unset!')
    if self.kin is None:
      raise TProtocol.TProtocolException(message='Required field kin is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RetrievePoseEvent:
  """
  Attributes:
   - pos
   - ori
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pos', (Position, Position.thrift_spec), Position(**{
    }), ), # 1
    (2, TType.STRUCT, 'ori', (Orientation, Orientation.thrift_spec), Orientation(**{
    }), ), # 2
  )

  def __init__(self, pos=thrift_spec[1][4], ori=thrift_spec[2][4],):
    if pos is self.thrift_spec[1][4]:
      pos = Position(**{
    })
    self.pos = pos
    if ori is self.thrift_spec[2][4]:
      ori = Orientation(**{
    })
    self.ori = ori

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pos = Position()
          self.pos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ori = Orientation()
          self.ori.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RetrievePoseEvent')
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.STRUCT, 1)
      self.pos.write(oprot)
      oprot.writeFieldEnd()
    if self.ori is not None:
      oprot.writeFieldBegin('ori', TType.STRUCT, 2)
      self.ori.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.pos is None:
      raise TProtocol.TProtocolException(message='Required field pos is unset!')
    if self.ori is None:
      raise TProtocol.TProtocolException(message='Required field ori is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RetrieveAnglesEvent:
  """
  Attributes:
   - angles
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'angles', (Angles, Angles.thrift_spec), Angles(**{
    }), ), # 1
  )

  def __init__(self, angles=thrift_spec[1][4],):
    if angles is self.thrift_spec[1][4]:
      angles = Angles(**{
    })
    self.angles = angles

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.angles = Angles()
          self.angles.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RetrieveAnglesEvent')
    if self.angles is not None:
      oprot.writeFieldBegin('angles', TType.STRUCT, 1)
      self.angles.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.angles is None:
      raise TProtocol.TProtocolException(message='Required field angles is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EstimateWorkingSurface:
  """
  Attributes:
   - limb
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'limb', None,     1, ), # 1
  )

  def __init__(self, limb=thrift_spec[1][4],):
    self.limb = limb

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.limb = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EstimateWorkingSurface')
    if self.limb is not None:
      oprot.writeFieldBegin('limb', TType.I32, 1)
      oprot.writeI32(self.limb)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.limb is None:
      raise TProtocol.TProtocolException(message='Required field limb is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GripperEvent:
  """
  Attributes:
   - limb
   - action
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'limb', None,     1, ), # 1
    (2, TType.I32, 'action', None,     1, ), # 2
  )

  def __init__(self, limb=thrift_spec[1][4], action=thrift_spec[2][4],):
    self.limb = limb
    self.action = action

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.limb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.action = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GripperEvent')
    if self.limb is not None:
      oprot.writeFieldBegin('limb', TType.I32, 1)
      oprot.writeI32(self.limb)
      oprot.writeFieldEnd()
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.I32, 2)
      oprot.writeI32(self.action)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.limb is None:
      raise TProtocol.TProtocolException(message='Required field limb is unset!')
    if self.action is None:
      raise TProtocol.TProtocolException(message='Required field action is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RetrieveApertureEvent:
  """
  Attributes:
   - right_aperture
   - left_aperture
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'right_aperture', None, "100", ), # 1
    (2, TType.STRING, 'left_aperture', None, "100", ), # 2
  )

  def __init__(self, right_aperture=thrift_spec[1][4], left_aperture=thrift_spec[2][4],):
    self.right_aperture = right_aperture
    self.left_aperture = left_aperture

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.right_aperture = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.left_aperture = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RetrieveApertureEvent')
    if self.right_aperture is not None:
      oprot.writeFieldBegin('right_aperture', TType.STRING, 1)
      oprot.writeString(self.right_aperture)
      oprot.writeFieldEnd()
    if self.left_aperture is not None:
      oprot.writeFieldBegin('left_aperture', TType.STRING, 2)
      oprot.writeString(self.left_aperture)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.right_aperture is None:
      raise TProtocol.TProtocolException(message='Required field right_aperture is unset!')
    if self.left_aperture is None:
      raise TProtocol.TProtocolException(message='Required field left_aperture is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveHeadEvent:
  """
  Attributes:
   - angle
   - speed
   - timeout
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'angle', None, 0, ), # 1
    (2, TType.I32, 'speed', None, 100, ), # 2
    (3, TType.DOUBLE, 'timeout', None, 0, ), # 3
  )

  def __init__(self, angle=thrift_spec[1][4], speed=thrift_spec[2][4], timeout=thrift_spec[3][4],):
    self.angle = angle
    self.speed = speed
    self.timeout = timeout

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.angle = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.speed = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.timeout = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveHeadEvent')
    if self.angle is not None:
      oprot.writeFieldBegin('angle', TType.DOUBLE, 1)
      oprot.writeDouble(self.angle)
      oprot.writeFieldEnd()
    if self.speed is not None:
      oprot.writeFieldBegin('speed', TType.I32, 2)
      oprot.writeI32(self.speed)
      oprot.writeFieldEnd()
    if self.timeout is not None:
      oprot.writeFieldBegin('timeout', TType.DOUBLE, 3)
      oprot.writeDouble(self.timeout)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.angle is None:
      raise TProtocol.TProtocolException(message='Required field angle is unset!')
    if self.speed is None:
      raise TProtocol.TProtocolException(message='Required field speed is unset!')
    if self.timeout is None:
      raise TProtocol.TProtocolException(message='Required field timeout is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RetrieveHeadPanEvent:
  """
  Attributes:
   - angle
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'angle', None, 0, ), # 1
  )

  def __init__(self, angle=thrift_spec[1][4],):
    self.angle = angle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.angle = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RetrieveHeadPanEvent')
    if self.angle is not None:
      oprot.writeFieldBegin('angle', TType.DOUBLE, 1)
      oprot.writeDouble(self.angle)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.angle is None:
      raise TProtocol.TProtocolException(message='Required field angle is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShowImageEvent:
  """
  Attributes:
   - type
   - surfaceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None,     0, ), # 1
    (2, TType.I32, 'surfaceId', None, -1, ), # 2
  )

  def __init__(self, type=thrift_spec[1][4], surfaceId=thrift_spec[2][4],):
    self.type = type
    self.surfaceId = surfaceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.surfaceId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShowImageEvent')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.surfaceId is not None:
      oprot.writeFieldBegin('surfaceId', TType.I32, 2)
      oprot.writeI32(self.surfaceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.surfaceId is None:
      raise TProtocol.TProtocolException(message='Required field surfaceId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalkEvent:
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, "Hello!", ), # 1
  )

  def __init__(self, message=thrift_spec[1][4],):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalkEvent')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
