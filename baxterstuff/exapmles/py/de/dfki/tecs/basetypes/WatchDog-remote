#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from de.dfki.tecs.basetypes import WatchDog
from de.dfki.tecs.basetypes.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string getMachineName()')
  print('  string getUsername()')
  print('  string getOs()')
  print('   getApps()')
  print('   getServices()')
  print('  void start(string applicationName)')
  print('  void stop(string applicationName)')
  print('  void restart(string applicationName)')
  print('  bool isRunning(string applicationName)')
  print('  void configure(AppConfig config)')
  print('  void unconfigure(string applicationName)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = WatchDog.Client(protocol)
transport.open()

if cmd == 'getMachineName':
  if len(args) != 0:
    print('getMachineName requires 0 args')
    sys.exit(1)
  pp.pprint(client.getMachineName())

elif cmd == 'getUsername':
  if len(args) != 0:
    print('getUsername requires 0 args')
    sys.exit(1)
  pp.pprint(client.getUsername())

elif cmd == 'getOs':
  if len(args) != 0:
    print('getOs requires 0 args')
    sys.exit(1)
  pp.pprint(client.getOs())

elif cmd == 'getApps':
  if len(args) != 0:
    print('getApps requires 0 args')
    sys.exit(1)
  pp.pprint(client.getApps())

elif cmd == 'getServices':
  if len(args) != 0:
    print('getServices requires 0 args')
    sys.exit(1)
  pp.pprint(client.getServices())

elif cmd == 'start':
  if len(args) != 1:
    print('start requires 1 args')
    sys.exit(1)
  pp.pprint(client.start(args[0],))

elif cmd == 'stop':
  if len(args) != 1:
    print('stop requires 1 args')
    sys.exit(1)
  pp.pprint(client.stop(args[0],))

elif cmd == 'restart':
  if len(args) != 1:
    print('restart requires 1 args')
    sys.exit(1)
  pp.pprint(client.restart(args[0],))

elif cmd == 'isRunning':
  if len(args) != 1:
    print('isRunning requires 1 args')
    sys.exit(1)
  pp.pprint(client.isRunning(args[0],))

elif cmd == 'configure':
  if len(args) != 1:
    print('configure requires 1 args')
    sys.exit(1)
  pp.pprint(client.configure(eval(args[0]),))

elif cmd == 'unconfigure':
  if len(args) != 1:
    print('unconfigure requires 1 args')
    sys.exit(1)
  pp.pprint(client.unconfigure(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
