/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.dfki.tecs.robot.baxter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RetrieveApertureEvent implements org.apache.thrift.TBase<RetrieveApertureEvent, RetrieveApertureEvent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RetrieveApertureEvent");

  private static final org.apache.thrift.protocol.TField RIGHT_APERTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("right_aperture", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LEFT_APERTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("left_aperture", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RetrieveApertureEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RetrieveApertureEventTupleSchemeFactory());
  }

  public String right_aperture; // required
  public String left_aperture; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RIGHT_APERTURE((short)1, "right_aperture"),
    LEFT_APERTURE((short)2, "left_aperture");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RIGHT_APERTURE
          return RIGHT_APERTURE;
        case 2: // LEFT_APERTURE
          return LEFT_APERTURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RIGHT_APERTURE, new org.apache.thrift.meta_data.FieldMetaData("right_aperture", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEFT_APERTURE, new org.apache.thrift.meta_data.FieldMetaData("left_aperture", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RetrieveApertureEvent.class, metaDataMap);
  }

  public RetrieveApertureEvent() {
    this.right_aperture = "100";

    this.left_aperture = "100";

  }

  public RetrieveApertureEvent(
    String right_aperture,
    String left_aperture)
  {
    this();
    this.right_aperture = right_aperture;
    this.left_aperture = left_aperture;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RetrieveApertureEvent(RetrieveApertureEvent other) {
    if (other.isSetRight_aperture()) {
      this.right_aperture = other.right_aperture;
    }
    if (other.isSetLeft_aperture()) {
      this.left_aperture = other.left_aperture;
    }
  }

  public RetrieveApertureEvent deepCopy() {
    return new RetrieveApertureEvent(this);
  }

  @Override
  public void clear() {
    this.right_aperture = "100";

    this.left_aperture = "100";

  }

  public String getRight_aperture() {
    return this.right_aperture;
  }

  public RetrieveApertureEvent setRight_aperture(String right_aperture) {
    this.right_aperture = right_aperture;
    return this;
  }

  public void unsetRight_aperture() {
    this.right_aperture = null;
  }

  /** Returns true if field right_aperture is set (has been assigned a value) and false otherwise */
  public boolean isSetRight_aperture() {
    return this.right_aperture != null;
  }

  public void setRight_apertureIsSet(boolean value) {
    if (!value) {
      this.right_aperture = null;
    }
  }

  public String getLeft_aperture() {
    return this.left_aperture;
  }

  public RetrieveApertureEvent setLeft_aperture(String left_aperture) {
    this.left_aperture = left_aperture;
    return this;
  }

  public void unsetLeft_aperture() {
    this.left_aperture = null;
  }

  /** Returns true if field left_aperture is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft_aperture() {
    return this.left_aperture != null;
  }

  public void setLeft_apertureIsSet(boolean value) {
    if (!value) {
      this.left_aperture = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RIGHT_APERTURE:
      if (value == null) {
        unsetRight_aperture();
      } else {
        setRight_aperture((String)value);
      }
      break;

    case LEFT_APERTURE:
      if (value == null) {
        unsetLeft_aperture();
      } else {
        setLeft_aperture((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RIGHT_APERTURE:
      return getRight_aperture();

    case LEFT_APERTURE:
      return getLeft_aperture();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RIGHT_APERTURE:
      return isSetRight_aperture();
    case LEFT_APERTURE:
      return isSetLeft_aperture();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RetrieveApertureEvent)
      return this.equals((RetrieveApertureEvent)that);
    return false;
  }

  public boolean equals(RetrieveApertureEvent that) {
    if (that == null)
      return false;

    boolean this_present_right_aperture = true && this.isSetRight_aperture();
    boolean that_present_right_aperture = true && that.isSetRight_aperture();
    if (this_present_right_aperture || that_present_right_aperture) {
      if (!(this_present_right_aperture && that_present_right_aperture))
        return false;
      if (!this.right_aperture.equals(that.right_aperture))
        return false;
    }

    boolean this_present_left_aperture = true && this.isSetLeft_aperture();
    boolean that_present_left_aperture = true && that.isSetLeft_aperture();
    if (this_present_left_aperture || that_present_left_aperture) {
      if (!(this_present_left_aperture && that_present_left_aperture))
        return false;
      if (!this.left_aperture.equals(that.left_aperture))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RetrieveApertureEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RetrieveApertureEvent typedOther = (RetrieveApertureEvent)other;

    lastComparison = Boolean.valueOf(isSetRight_aperture()).compareTo(typedOther.isSetRight_aperture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRight_aperture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.right_aperture, typedOther.right_aperture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeft_aperture()).compareTo(typedOther.isSetLeft_aperture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft_aperture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left_aperture, typedOther.left_aperture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RetrieveApertureEvent(");
    boolean first = true;

    sb.append("right_aperture:");
    if (this.right_aperture == null) {
      sb.append("null");
    } else {
      sb.append(this.right_aperture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("left_aperture:");
    if (this.left_aperture == null) {
      sb.append("null");
    } else {
      sb.append(this.left_aperture);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (right_aperture == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'right_aperture' was not present! Struct: " + toString());
    }
    if (left_aperture == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'left_aperture' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RetrieveApertureEventStandardSchemeFactory implements SchemeFactory {
    public RetrieveApertureEventStandardScheme getScheme() {
      return new RetrieveApertureEventStandardScheme();
    }
  }

  private static class RetrieveApertureEventStandardScheme extends StandardScheme<RetrieveApertureEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RetrieveApertureEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RIGHT_APERTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.right_aperture = iprot.readString();
              struct.setRight_apertureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEFT_APERTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.left_aperture = iprot.readString();
              struct.setLeft_apertureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RetrieveApertureEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.right_aperture != null) {
        oprot.writeFieldBegin(RIGHT_APERTURE_FIELD_DESC);
        oprot.writeString(struct.right_aperture);
        oprot.writeFieldEnd();
      }
      if (struct.left_aperture != null) {
        oprot.writeFieldBegin(LEFT_APERTURE_FIELD_DESC);
        oprot.writeString(struct.left_aperture);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RetrieveApertureEventTupleSchemeFactory implements SchemeFactory {
    public RetrieveApertureEventTupleScheme getScheme() {
      return new RetrieveApertureEventTupleScheme();
    }
  }

  private static class RetrieveApertureEventTupleScheme extends TupleScheme<RetrieveApertureEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RetrieveApertureEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.right_aperture);
      oprot.writeString(struct.left_aperture);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RetrieveApertureEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.right_aperture = iprot.readString();
      struct.setRight_apertureIsSet(true);
      struct.left_aperture = iprot.readString();
      struct.setLeft_apertureIsSet(true);
    }
  }

}

