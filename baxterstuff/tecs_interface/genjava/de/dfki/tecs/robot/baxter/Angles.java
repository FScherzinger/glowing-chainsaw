/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.dfki.tecs.robot.baxter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Angles implements org.apache.thrift.TBase<Angles, Angles._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Angles");

  private static final org.apache.thrift.protocol.TField LEFT_S0_FIELD_DESC = new org.apache.thrift.protocol.TField("left_s0", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LEFT_S1_FIELD_DESC = new org.apache.thrift.protocol.TField("left_s1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LEFT_E0_FIELD_DESC = new org.apache.thrift.protocol.TField("left_e0", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LEFT_E1_FIELD_DESC = new org.apache.thrift.protocol.TField("left_e1", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LEFT_W0_FIELD_DESC = new org.apache.thrift.protocol.TField("left_w0", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LEFT_W1_FIELD_DESC = new org.apache.thrift.protocol.TField("left_w1", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LEFT_W2_FIELD_DESC = new org.apache.thrift.protocol.TField("left_w2", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RIGHT_S0_FIELD_DESC = new org.apache.thrift.protocol.TField("right_s0", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RIGHT_S1_FIELD_DESC = new org.apache.thrift.protocol.TField("right_s1", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField RIGHT_E0_FIELD_DESC = new org.apache.thrift.protocol.TField("right_e0", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField RIGHT_E1_FIELD_DESC = new org.apache.thrift.protocol.TField("right_e1", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RIGHT_W0_FIELD_DESC = new org.apache.thrift.protocol.TField("right_w0", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField RIGHT_W1_FIELD_DESC = new org.apache.thrift.protocol.TField("right_w1", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField RIGHT_W2_FIELD_DESC = new org.apache.thrift.protocol.TField("right_w2", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AnglesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AnglesTupleSchemeFactory());
  }

  public String left_s0; // required
  public String left_s1; // required
  public String left_e0; // required
  public String left_e1; // required
  public String left_w0; // required
  public String left_w1; // required
  public String left_w2; // required
  public String right_s0; // required
  public String right_s1; // required
  public String right_e0; // required
  public String right_e1; // required
  public String right_w0; // required
  public String right_w1; // required
  public String right_w2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEFT_S0((short)1, "left_s0"),
    LEFT_S1((short)2, "left_s1"),
    LEFT_E0((short)3, "left_e0"),
    LEFT_E1((short)4, "left_e1"),
    LEFT_W0((short)5, "left_w0"),
    LEFT_W1((short)6, "left_w1"),
    LEFT_W2((short)7, "left_w2"),
    RIGHT_S0((short)8, "right_s0"),
    RIGHT_S1((short)9, "right_s1"),
    RIGHT_E0((short)10, "right_e0"),
    RIGHT_E1((short)11, "right_e1"),
    RIGHT_W0((short)12, "right_w0"),
    RIGHT_W1((short)13, "right_w1"),
    RIGHT_W2((short)14, "right_w2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEFT_S0
          return LEFT_S0;
        case 2: // LEFT_S1
          return LEFT_S1;
        case 3: // LEFT_E0
          return LEFT_E0;
        case 4: // LEFT_E1
          return LEFT_E1;
        case 5: // LEFT_W0
          return LEFT_W0;
        case 6: // LEFT_W1
          return LEFT_W1;
        case 7: // LEFT_W2
          return LEFT_W2;
        case 8: // RIGHT_S0
          return RIGHT_S0;
        case 9: // RIGHT_S1
          return RIGHT_S1;
        case 10: // RIGHT_E0
          return RIGHT_E0;
        case 11: // RIGHT_E1
          return RIGHT_E1;
        case 12: // RIGHT_W0
          return RIGHT_W0;
        case 13: // RIGHT_W1
          return RIGHT_W1;
        case 14: // RIGHT_W2
          return RIGHT_W2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEFT_S0, new org.apache.thrift.meta_data.FieldMetaData("left_s0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEFT_S1, new org.apache.thrift.meta_data.FieldMetaData("left_s1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEFT_E0, new org.apache.thrift.meta_data.FieldMetaData("left_e0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEFT_E1, new org.apache.thrift.meta_data.FieldMetaData("left_e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEFT_W0, new org.apache.thrift.meta_data.FieldMetaData("left_w0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEFT_W1, new org.apache.thrift.meta_data.FieldMetaData("left_w1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEFT_W2, new org.apache.thrift.meta_data.FieldMetaData("left_w2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHT_S0, new org.apache.thrift.meta_data.FieldMetaData("right_s0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHT_S1, new org.apache.thrift.meta_data.FieldMetaData("right_s1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHT_E0, new org.apache.thrift.meta_data.FieldMetaData("right_e0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHT_E1, new org.apache.thrift.meta_data.FieldMetaData("right_e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHT_W0, new org.apache.thrift.meta_data.FieldMetaData("right_w0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHT_W1, new org.apache.thrift.meta_data.FieldMetaData("right_w1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHT_W2, new org.apache.thrift.meta_data.FieldMetaData("right_w2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Angles.class, metaDataMap);
  }

  public Angles() {
    this.left_s0 = "";

    this.left_s1 = "";

    this.left_e0 = "";

    this.left_e1 = "";

    this.left_w0 = "";

    this.left_w1 = "";

    this.left_w2 = "";

    this.right_s0 = "";

    this.right_s1 = "";

    this.right_e0 = "";

    this.right_e1 = "";

    this.right_w0 = "";

    this.right_w1 = "";

    this.right_w2 = "";

  }

  public Angles(
    String left_s0,
    String left_s1,
    String left_e0,
    String left_e1,
    String left_w0,
    String left_w1,
    String left_w2,
    String right_s0,
    String right_s1,
    String right_e0,
    String right_e1,
    String right_w0,
    String right_w1,
    String right_w2)
  {
    this();
    this.left_s0 = left_s0;
    this.left_s1 = left_s1;
    this.left_e0 = left_e0;
    this.left_e1 = left_e1;
    this.left_w0 = left_w0;
    this.left_w1 = left_w1;
    this.left_w2 = left_w2;
    this.right_s0 = right_s0;
    this.right_s1 = right_s1;
    this.right_e0 = right_e0;
    this.right_e1 = right_e1;
    this.right_w0 = right_w0;
    this.right_w1 = right_w1;
    this.right_w2 = right_w2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Angles(Angles other) {
    if (other.isSetLeft_s0()) {
      this.left_s0 = other.left_s0;
    }
    if (other.isSetLeft_s1()) {
      this.left_s1 = other.left_s1;
    }
    if (other.isSetLeft_e0()) {
      this.left_e0 = other.left_e0;
    }
    if (other.isSetLeft_e1()) {
      this.left_e1 = other.left_e1;
    }
    if (other.isSetLeft_w0()) {
      this.left_w0 = other.left_w0;
    }
    if (other.isSetLeft_w1()) {
      this.left_w1 = other.left_w1;
    }
    if (other.isSetLeft_w2()) {
      this.left_w2 = other.left_w2;
    }
    if (other.isSetRight_s0()) {
      this.right_s0 = other.right_s0;
    }
    if (other.isSetRight_s1()) {
      this.right_s1 = other.right_s1;
    }
    if (other.isSetRight_e0()) {
      this.right_e0 = other.right_e0;
    }
    if (other.isSetRight_e1()) {
      this.right_e1 = other.right_e1;
    }
    if (other.isSetRight_w0()) {
      this.right_w0 = other.right_w0;
    }
    if (other.isSetRight_w1()) {
      this.right_w1 = other.right_w1;
    }
    if (other.isSetRight_w2()) {
      this.right_w2 = other.right_w2;
    }
  }

  public Angles deepCopy() {
    return new Angles(this);
  }

  @Override
  public void clear() {
    this.left_s0 = "";

    this.left_s1 = "";

    this.left_e0 = "";

    this.left_e1 = "";

    this.left_w0 = "";

    this.left_w1 = "";

    this.left_w2 = "";

    this.right_s0 = "";

    this.right_s1 = "";

    this.right_e0 = "";

    this.right_e1 = "";

    this.right_w0 = "";

    this.right_w1 = "";

    this.right_w2 = "";

  }

  public String getLeft_s0() {
    return this.left_s0;
  }

  public Angles setLeft_s0(String left_s0) {
    this.left_s0 = left_s0;
    return this;
  }

  public void unsetLeft_s0() {
    this.left_s0 = null;
  }

  /** Returns true if field left_s0 is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft_s0() {
    return this.left_s0 != null;
  }

  public void setLeft_s0IsSet(boolean value) {
    if (!value) {
      this.left_s0 = null;
    }
  }

  public String getLeft_s1() {
    return this.left_s1;
  }

  public Angles setLeft_s1(String left_s1) {
    this.left_s1 = left_s1;
    return this;
  }

  public void unsetLeft_s1() {
    this.left_s1 = null;
  }

  /** Returns true if field left_s1 is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft_s1() {
    return this.left_s1 != null;
  }

  public void setLeft_s1IsSet(boolean value) {
    if (!value) {
      this.left_s1 = null;
    }
  }

  public String getLeft_e0() {
    return this.left_e0;
  }

  public Angles setLeft_e0(String left_e0) {
    this.left_e0 = left_e0;
    return this;
  }

  public void unsetLeft_e0() {
    this.left_e0 = null;
  }

  /** Returns true if field left_e0 is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft_e0() {
    return this.left_e0 != null;
  }

  public void setLeft_e0IsSet(boolean value) {
    if (!value) {
      this.left_e0 = null;
    }
  }

  public String getLeft_e1() {
    return this.left_e1;
  }

  public Angles setLeft_e1(String left_e1) {
    this.left_e1 = left_e1;
    return this;
  }

  public void unsetLeft_e1() {
    this.left_e1 = null;
  }

  /** Returns true if field left_e1 is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft_e1() {
    return this.left_e1 != null;
  }

  public void setLeft_e1IsSet(boolean value) {
    if (!value) {
      this.left_e1 = null;
    }
  }

  public String getLeft_w0() {
    return this.left_w0;
  }

  public Angles setLeft_w0(String left_w0) {
    this.left_w0 = left_w0;
    return this;
  }

  public void unsetLeft_w0() {
    this.left_w0 = null;
  }

  /** Returns true if field left_w0 is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft_w0() {
    return this.left_w0 != null;
  }

  public void setLeft_w0IsSet(boolean value) {
    if (!value) {
      this.left_w0 = null;
    }
  }

  public String getLeft_w1() {
    return this.left_w1;
  }

  public Angles setLeft_w1(String left_w1) {
    this.left_w1 = left_w1;
    return this;
  }

  public void unsetLeft_w1() {
    this.left_w1 = null;
  }

  /** Returns true if field left_w1 is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft_w1() {
    return this.left_w1 != null;
  }

  public void setLeft_w1IsSet(boolean value) {
    if (!value) {
      this.left_w1 = null;
    }
  }

  public String getLeft_w2() {
    return this.left_w2;
  }

  public Angles setLeft_w2(String left_w2) {
    this.left_w2 = left_w2;
    return this;
  }

  public void unsetLeft_w2() {
    this.left_w2 = null;
  }

  /** Returns true if field left_w2 is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft_w2() {
    return this.left_w2 != null;
  }

  public void setLeft_w2IsSet(boolean value) {
    if (!value) {
      this.left_w2 = null;
    }
  }

  public String getRight_s0() {
    return this.right_s0;
  }

  public Angles setRight_s0(String right_s0) {
    this.right_s0 = right_s0;
    return this;
  }

  public void unsetRight_s0() {
    this.right_s0 = null;
  }

  /** Returns true if field right_s0 is set (has been assigned a value) and false otherwise */
  public boolean isSetRight_s0() {
    return this.right_s0 != null;
  }

  public void setRight_s0IsSet(boolean value) {
    if (!value) {
      this.right_s0 = null;
    }
  }

  public String getRight_s1() {
    return this.right_s1;
  }

  public Angles setRight_s1(String right_s1) {
    this.right_s1 = right_s1;
    return this;
  }

  public void unsetRight_s1() {
    this.right_s1 = null;
  }

  /** Returns true if field right_s1 is set (has been assigned a value) and false otherwise */
  public boolean isSetRight_s1() {
    return this.right_s1 != null;
  }

  public void setRight_s1IsSet(boolean value) {
    if (!value) {
      this.right_s1 = null;
    }
  }

  public String getRight_e0() {
    return this.right_e0;
  }

  public Angles setRight_e0(String right_e0) {
    this.right_e0 = right_e0;
    return this;
  }

  public void unsetRight_e0() {
    this.right_e0 = null;
  }

  /** Returns true if field right_e0 is set (has been assigned a value) and false otherwise */
  public boolean isSetRight_e0() {
    return this.right_e0 != null;
  }

  public void setRight_e0IsSet(boolean value) {
    if (!value) {
      this.right_e0 = null;
    }
  }

  public String getRight_e1() {
    return this.right_e1;
  }

  public Angles setRight_e1(String right_e1) {
    this.right_e1 = right_e1;
    return this;
  }

  public void unsetRight_e1() {
    this.right_e1 = null;
  }

  /** Returns true if field right_e1 is set (has been assigned a value) and false otherwise */
  public boolean isSetRight_e1() {
    return this.right_e1 != null;
  }

  public void setRight_e1IsSet(boolean value) {
    if (!value) {
      this.right_e1 = null;
    }
  }

  public String getRight_w0() {
    return this.right_w0;
  }

  public Angles setRight_w0(String right_w0) {
    this.right_w0 = right_w0;
    return this;
  }

  public void unsetRight_w0() {
    this.right_w0 = null;
  }

  /** Returns true if field right_w0 is set (has been assigned a value) and false otherwise */
  public boolean isSetRight_w0() {
    return this.right_w0 != null;
  }

  public void setRight_w0IsSet(boolean value) {
    if (!value) {
      this.right_w0 = null;
    }
  }

  public String getRight_w1() {
    return this.right_w1;
  }

  public Angles setRight_w1(String right_w1) {
    this.right_w1 = right_w1;
    return this;
  }

  public void unsetRight_w1() {
    this.right_w1 = null;
  }

  /** Returns true if field right_w1 is set (has been assigned a value) and false otherwise */
  public boolean isSetRight_w1() {
    return this.right_w1 != null;
  }

  public void setRight_w1IsSet(boolean value) {
    if (!value) {
      this.right_w1 = null;
    }
  }

  public String getRight_w2() {
    return this.right_w2;
  }

  public Angles setRight_w2(String right_w2) {
    this.right_w2 = right_w2;
    return this;
  }

  public void unsetRight_w2() {
    this.right_w2 = null;
  }

  /** Returns true if field right_w2 is set (has been assigned a value) and false otherwise */
  public boolean isSetRight_w2() {
    return this.right_w2 != null;
  }

  public void setRight_w2IsSet(boolean value) {
    if (!value) {
      this.right_w2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEFT_S0:
      if (value == null) {
        unsetLeft_s0();
      } else {
        setLeft_s0((String)value);
      }
      break;

    case LEFT_S1:
      if (value == null) {
        unsetLeft_s1();
      } else {
        setLeft_s1((String)value);
      }
      break;

    case LEFT_E0:
      if (value == null) {
        unsetLeft_e0();
      } else {
        setLeft_e0((String)value);
      }
      break;

    case LEFT_E1:
      if (value == null) {
        unsetLeft_e1();
      } else {
        setLeft_e1((String)value);
      }
      break;

    case LEFT_W0:
      if (value == null) {
        unsetLeft_w0();
      } else {
        setLeft_w0((String)value);
      }
      break;

    case LEFT_W1:
      if (value == null) {
        unsetLeft_w1();
      } else {
        setLeft_w1((String)value);
      }
      break;

    case LEFT_W2:
      if (value == null) {
        unsetLeft_w2();
      } else {
        setLeft_w2((String)value);
      }
      break;

    case RIGHT_S0:
      if (value == null) {
        unsetRight_s0();
      } else {
        setRight_s0((String)value);
      }
      break;

    case RIGHT_S1:
      if (value == null) {
        unsetRight_s1();
      } else {
        setRight_s1((String)value);
      }
      break;

    case RIGHT_E0:
      if (value == null) {
        unsetRight_e0();
      } else {
        setRight_e0((String)value);
      }
      break;

    case RIGHT_E1:
      if (value == null) {
        unsetRight_e1();
      } else {
        setRight_e1((String)value);
      }
      break;

    case RIGHT_W0:
      if (value == null) {
        unsetRight_w0();
      } else {
        setRight_w0((String)value);
      }
      break;

    case RIGHT_W1:
      if (value == null) {
        unsetRight_w1();
      } else {
        setRight_w1((String)value);
      }
      break;

    case RIGHT_W2:
      if (value == null) {
        unsetRight_w2();
      } else {
        setRight_w2((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEFT_S0:
      return getLeft_s0();

    case LEFT_S1:
      return getLeft_s1();

    case LEFT_E0:
      return getLeft_e0();

    case LEFT_E1:
      return getLeft_e1();

    case LEFT_W0:
      return getLeft_w0();

    case LEFT_W1:
      return getLeft_w1();

    case LEFT_W2:
      return getLeft_w2();

    case RIGHT_S0:
      return getRight_s0();

    case RIGHT_S1:
      return getRight_s1();

    case RIGHT_E0:
      return getRight_e0();

    case RIGHT_E1:
      return getRight_e1();

    case RIGHT_W0:
      return getRight_w0();

    case RIGHT_W1:
      return getRight_w1();

    case RIGHT_W2:
      return getRight_w2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEFT_S0:
      return isSetLeft_s0();
    case LEFT_S1:
      return isSetLeft_s1();
    case LEFT_E0:
      return isSetLeft_e0();
    case LEFT_E1:
      return isSetLeft_e1();
    case LEFT_W0:
      return isSetLeft_w0();
    case LEFT_W1:
      return isSetLeft_w1();
    case LEFT_W2:
      return isSetLeft_w2();
    case RIGHT_S0:
      return isSetRight_s0();
    case RIGHT_S1:
      return isSetRight_s1();
    case RIGHT_E0:
      return isSetRight_e0();
    case RIGHT_E1:
      return isSetRight_e1();
    case RIGHT_W0:
      return isSetRight_w0();
    case RIGHT_W1:
      return isSetRight_w1();
    case RIGHT_W2:
      return isSetRight_w2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Angles)
      return this.equals((Angles)that);
    return false;
  }

  public boolean equals(Angles that) {
    if (that == null)
      return false;

    boolean this_present_left_s0 = true && this.isSetLeft_s0();
    boolean that_present_left_s0 = true && that.isSetLeft_s0();
    if (this_present_left_s0 || that_present_left_s0) {
      if (!(this_present_left_s0 && that_present_left_s0))
        return false;
      if (!this.left_s0.equals(that.left_s0))
        return false;
    }

    boolean this_present_left_s1 = true && this.isSetLeft_s1();
    boolean that_present_left_s1 = true && that.isSetLeft_s1();
    if (this_present_left_s1 || that_present_left_s1) {
      if (!(this_present_left_s1 && that_present_left_s1))
        return false;
      if (!this.left_s1.equals(that.left_s1))
        return false;
    }

    boolean this_present_left_e0 = true && this.isSetLeft_e0();
    boolean that_present_left_e0 = true && that.isSetLeft_e0();
    if (this_present_left_e0 || that_present_left_e0) {
      if (!(this_present_left_e0 && that_present_left_e0))
        return false;
      if (!this.left_e0.equals(that.left_e0))
        return false;
    }

    boolean this_present_left_e1 = true && this.isSetLeft_e1();
    boolean that_present_left_e1 = true && that.isSetLeft_e1();
    if (this_present_left_e1 || that_present_left_e1) {
      if (!(this_present_left_e1 && that_present_left_e1))
        return false;
      if (!this.left_e1.equals(that.left_e1))
        return false;
    }

    boolean this_present_left_w0 = true && this.isSetLeft_w0();
    boolean that_present_left_w0 = true && that.isSetLeft_w0();
    if (this_present_left_w0 || that_present_left_w0) {
      if (!(this_present_left_w0 && that_present_left_w0))
        return false;
      if (!this.left_w0.equals(that.left_w0))
        return false;
    }

    boolean this_present_left_w1 = true && this.isSetLeft_w1();
    boolean that_present_left_w1 = true && that.isSetLeft_w1();
    if (this_present_left_w1 || that_present_left_w1) {
      if (!(this_present_left_w1 && that_present_left_w1))
        return false;
      if (!this.left_w1.equals(that.left_w1))
        return false;
    }

    boolean this_present_left_w2 = true && this.isSetLeft_w2();
    boolean that_present_left_w2 = true && that.isSetLeft_w2();
    if (this_present_left_w2 || that_present_left_w2) {
      if (!(this_present_left_w2 && that_present_left_w2))
        return false;
      if (!this.left_w2.equals(that.left_w2))
        return false;
    }

    boolean this_present_right_s0 = true && this.isSetRight_s0();
    boolean that_present_right_s0 = true && that.isSetRight_s0();
    if (this_present_right_s0 || that_present_right_s0) {
      if (!(this_present_right_s0 && that_present_right_s0))
        return false;
      if (!this.right_s0.equals(that.right_s0))
        return false;
    }

    boolean this_present_right_s1 = true && this.isSetRight_s1();
    boolean that_present_right_s1 = true && that.isSetRight_s1();
    if (this_present_right_s1 || that_present_right_s1) {
      if (!(this_present_right_s1 && that_present_right_s1))
        return false;
      if (!this.right_s1.equals(that.right_s1))
        return false;
    }

    boolean this_present_right_e0 = true && this.isSetRight_e0();
    boolean that_present_right_e0 = true && that.isSetRight_e0();
    if (this_present_right_e0 || that_present_right_e0) {
      if (!(this_present_right_e0 && that_present_right_e0))
        return false;
      if (!this.right_e0.equals(that.right_e0))
        return false;
    }

    boolean this_present_right_e1 = true && this.isSetRight_e1();
    boolean that_present_right_e1 = true && that.isSetRight_e1();
    if (this_present_right_e1 || that_present_right_e1) {
      if (!(this_present_right_e1 && that_present_right_e1))
        return false;
      if (!this.right_e1.equals(that.right_e1))
        return false;
    }

    boolean this_present_right_w0 = true && this.isSetRight_w0();
    boolean that_present_right_w0 = true && that.isSetRight_w0();
    if (this_present_right_w0 || that_present_right_w0) {
      if (!(this_present_right_w0 && that_present_right_w0))
        return false;
      if (!this.right_w0.equals(that.right_w0))
        return false;
    }

    boolean this_present_right_w1 = true && this.isSetRight_w1();
    boolean that_present_right_w1 = true && that.isSetRight_w1();
    if (this_present_right_w1 || that_present_right_w1) {
      if (!(this_present_right_w1 && that_present_right_w1))
        return false;
      if (!this.right_w1.equals(that.right_w1))
        return false;
    }

    boolean this_present_right_w2 = true && this.isSetRight_w2();
    boolean that_present_right_w2 = true && that.isSetRight_w2();
    if (this_present_right_w2 || that_present_right_w2) {
      if (!(this_present_right_w2 && that_present_right_w2))
        return false;
      if (!this.right_w2.equals(that.right_w2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Angles other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Angles typedOther = (Angles)other;

    lastComparison = Boolean.valueOf(isSetLeft_s0()).compareTo(typedOther.isSetLeft_s0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft_s0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left_s0, typedOther.left_s0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeft_s1()).compareTo(typedOther.isSetLeft_s1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft_s1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left_s1, typedOther.left_s1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeft_e0()).compareTo(typedOther.isSetLeft_e0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft_e0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left_e0, typedOther.left_e0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeft_e1()).compareTo(typedOther.isSetLeft_e1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft_e1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left_e1, typedOther.left_e1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeft_w0()).compareTo(typedOther.isSetLeft_w0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft_w0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left_w0, typedOther.left_w0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeft_w1()).compareTo(typedOther.isSetLeft_w1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft_w1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left_w1, typedOther.left_w1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeft_w2()).compareTo(typedOther.isSetLeft_w2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft_w2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left_w2, typedOther.left_w2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRight_s0()).compareTo(typedOther.isSetRight_s0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRight_s0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.right_s0, typedOther.right_s0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRight_s1()).compareTo(typedOther.isSetRight_s1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRight_s1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.right_s1, typedOther.right_s1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRight_e0()).compareTo(typedOther.isSetRight_e0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRight_e0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.right_e0, typedOther.right_e0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRight_e1()).compareTo(typedOther.isSetRight_e1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRight_e1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.right_e1, typedOther.right_e1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRight_w0()).compareTo(typedOther.isSetRight_w0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRight_w0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.right_w0, typedOther.right_w0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRight_w1()).compareTo(typedOther.isSetRight_w1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRight_w1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.right_w1, typedOther.right_w1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRight_w2()).compareTo(typedOther.isSetRight_w2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRight_w2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.right_w2, typedOther.right_w2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Angles(");
    boolean first = true;

    sb.append("left_s0:");
    if (this.left_s0 == null) {
      sb.append("null");
    } else {
      sb.append(this.left_s0);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("left_s1:");
    if (this.left_s1 == null) {
      sb.append("null");
    } else {
      sb.append(this.left_s1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("left_e0:");
    if (this.left_e0 == null) {
      sb.append("null");
    } else {
      sb.append(this.left_e0);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("left_e1:");
    if (this.left_e1 == null) {
      sb.append("null");
    } else {
      sb.append(this.left_e1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("left_w0:");
    if (this.left_w0 == null) {
      sb.append("null");
    } else {
      sb.append(this.left_w0);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("left_w1:");
    if (this.left_w1 == null) {
      sb.append("null");
    } else {
      sb.append(this.left_w1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("left_w2:");
    if (this.left_w2 == null) {
      sb.append("null");
    } else {
      sb.append(this.left_w2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("right_s0:");
    if (this.right_s0 == null) {
      sb.append("null");
    } else {
      sb.append(this.right_s0);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("right_s1:");
    if (this.right_s1 == null) {
      sb.append("null");
    } else {
      sb.append(this.right_s1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("right_e0:");
    if (this.right_e0 == null) {
      sb.append("null");
    } else {
      sb.append(this.right_e0);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("right_e1:");
    if (this.right_e1 == null) {
      sb.append("null");
    } else {
      sb.append(this.right_e1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("right_w0:");
    if (this.right_w0 == null) {
      sb.append("null");
    } else {
      sb.append(this.right_w0);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("right_w1:");
    if (this.right_w1 == null) {
      sb.append("null");
    } else {
      sb.append(this.right_w1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("right_w2:");
    if (this.right_w2 == null) {
      sb.append("null");
    } else {
      sb.append(this.right_w2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AnglesStandardSchemeFactory implements SchemeFactory {
    public AnglesStandardScheme getScheme() {
      return new AnglesStandardScheme();
    }
  }

  private static class AnglesStandardScheme extends StandardScheme<Angles> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Angles struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEFT_S0
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.left_s0 = iprot.readString();
              struct.setLeft_s0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEFT_S1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.left_s1 = iprot.readString();
              struct.setLeft_s1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEFT_E0
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.left_e0 = iprot.readString();
              struct.setLeft_e0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEFT_E1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.left_e1 = iprot.readString();
              struct.setLeft_e1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEFT_W0
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.left_w0 = iprot.readString();
              struct.setLeft_w0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LEFT_W1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.left_w1 = iprot.readString();
              struct.setLeft_w1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LEFT_W2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.left_w2 = iprot.readString();
              struct.setLeft_w2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RIGHT_S0
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.right_s0 = iprot.readString();
              struct.setRight_s0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RIGHT_S1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.right_s1 = iprot.readString();
              struct.setRight_s1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RIGHT_E0
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.right_e0 = iprot.readString();
              struct.setRight_e0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RIGHT_E1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.right_e1 = iprot.readString();
              struct.setRight_e1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RIGHT_W0
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.right_w0 = iprot.readString();
              struct.setRight_w0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RIGHT_W1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.right_w1 = iprot.readString();
              struct.setRight_w1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RIGHT_W2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.right_w2 = iprot.readString();
              struct.setRight_w2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Angles struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.left_s0 != null) {
        oprot.writeFieldBegin(LEFT_S0_FIELD_DESC);
        oprot.writeString(struct.left_s0);
        oprot.writeFieldEnd();
      }
      if (struct.left_s1 != null) {
        oprot.writeFieldBegin(LEFT_S1_FIELD_DESC);
        oprot.writeString(struct.left_s1);
        oprot.writeFieldEnd();
      }
      if (struct.left_e0 != null) {
        oprot.writeFieldBegin(LEFT_E0_FIELD_DESC);
        oprot.writeString(struct.left_e0);
        oprot.writeFieldEnd();
      }
      if (struct.left_e1 != null) {
        oprot.writeFieldBegin(LEFT_E1_FIELD_DESC);
        oprot.writeString(struct.left_e1);
        oprot.writeFieldEnd();
      }
      if (struct.left_w0 != null) {
        oprot.writeFieldBegin(LEFT_W0_FIELD_DESC);
        oprot.writeString(struct.left_w0);
        oprot.writeFieldEnd();
      }
      if (struct.left_w1 != null) {
        oprot.writeFieldBegin(LEFT_W1_FIELD_DESC);
        oprot.writeString(struct.left_w1);
        oprot.writeFieldEnd();
      }
      if (struct.left_w2 != null) {
        oprot.writeFieldBegin(LEFT_W2_FIELD_DESC);
        oprot.writeString(struct.left_w2);
        oprot.writeFieldEnd();
      }
      if (struct.right_s0 != null) {
        oprot.writeFieldBegin(RIGHT_S0_FIELD_DESC);
        oprot.writeString(struct.right_s0);
        oprot.writeFieldEnd();
      }
      if (struct.right_s1 != null) {
        oprot.writeFieldBegin(RIGHT_S1_FIELD_DESC);
        oprot.writeString(struct.right_s1);
        oprot.writeFieldEnd();
      }
      if (struct.right_e0 != null) {
        oprot.writeFieldBegin(RIGHT_E0_FIELD_DESC);
        oprot.writeString(struct.right_e0);
        oprot.writeFieldEnd();
      }
      if (struct.right_e1 != null) {
        oprot.writeFieldBegin(RIGHT_E1_FIELD_DESC);
        oprot.writeString(struct.right_e1);
        oprot.writeFieldEnd();
      }
      if (struct.right_w0 != null) {
        oprot.writeFieldBegin(RIGHT_W0_FIELD_DESC);
        oprot.writeString(struct.right_w0);
        oprot.writeFieldEnd();
      }
      if (struct.right_w1 != null) {
        oprot.writeFieldBegin(RIGHT_W1_FIELD_DESC);
        oprot.writeString(struct.right_w1);
        oprot.writeFieldEnd();
      }
      if (struct.right_w2 != null) {
        oprot.writeFieldBegin(RIGHT_W2_FIELD_DESC);
        oprot.writeString(struct.right_w2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AnglesTupleSchemeFactory implements SchemeFactory {
    public AnglesTupleScheme getScheme() {
      return new AnglesTupleScheme();
    }
  }

  private static class AnglesTupleScheme extends TupleScheme<Angles> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Angles struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLeft_s0()) {
        optionals.set(0);
      }
      if (struct.isSetLeft_s1()) {
        optionals.set(1);
      }
      if (struct.isSetLeft_e0()) {
        optionals.set(2);
      }
      if (struct.isSetLeft_e1()) {
        optionals.set(3);
      }
      if (struct.isSetLeft_w0()) {
        optionals.set(4);
      }
      if (struct.isSetLeft_w1()) {
        optionals.set(5);
      }
      if (struct.isSetLeft_w2()) {
        optionals.set(6);
      }
      if (struct.isSetRight_s0()) {
        optionals.set(7);
      }
      if (struct.isSetRight_s1()) {
        optionals.set(8);
      }
      if (struct.isSetRight_e0()) {
        optionals.set(9);
      }
      if (struct.isSetRight_e1()) {
        optionals.set(10);
      }
      if (struct.isSetRight_w0()) {
        optionals.set(11);
      }
      if (struct.isSetRight_w1()) {
        optionals.set(12);
      }
      if (struct.isSetRight_w2()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetLeft_s0()) {
        oprot.writeString(struct.left_s0);
      }
      if (struct.isSetLeft_s1()) {
        oprot.writeString(struct.left_s1);
      }
      if (struct.isSetLeft_e0()) {
        oprot.writeString(struct.left_e0);
      }
      if (struct.isSetLeft_e1()) {
        oprot.writeString(struct.left_e1);
      }
      if (struct.isSetLeft_w0()) {
        oprot.writeString(struct.left_w0);
      }
      if (struct.isSetLeft_w1()) {
        oprot.writeString(struct.left_w1);
      }
      if (struct.isSetLeft_w2()) {
        oprot.writeString(struct.left_w2);
      }
      if (struct.isSetRight_s0()) {
        oprot.writeString(struct.right_s0);
      }
      if (struct.isSetRight_s1()) {
        oprot.writeString(struct.right_s1);
      }
      if (struct.isSetRight_e0()) {
        oprot.writeString(struct.right_e0);
      }
      if (struct.isSetRight_e1()) {
        oprot.writeString(struct.right_e1);
      }
      if (struct.isSetRight_w0()) {
        oprot.writeString(struct.right_w0);
      }
      if (struct.isSetRight_w1()) {
        oprot.writeString(struct.right_w1);
      }
      if (struct.isSetRight_w2()) {
        oprot.writeString(struct.right_w2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Angles struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.left_s0 = iprot.readString();
        struct.setLeft_s0IsSet(true);
      }
      if (incoming.get(1)) {
        struct.left_s1 = iprot.readString();
        struct.setLeft_s1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.left_e0 = iprot.readString();
        struct.setLeft_e0IsSet(true);
      }
      if (incoming.get(3)) {
        struct.left_e1 = iprot.readString();
        struct.setLeft_e1IsSet(true);
      }
      if (incoming.get(4)) {
        struct.left_w0 = iprot.readString();
        struct.setLeft_w0IsSet(true);
      }
      if (incoming.get(5)) {
        struct.left_w1 = iprot.readString();
        struct.setLeft_w1IsSet(true);
      }
      if (incoming.get(6)) {
        struct.left_w2 = iprot.readString();
        struct.setLeft_w2IsSet(true);
      }
      if (incoming.get(7)) {
        struct.right_s0 = iprot.readString();
        struct.setRight_s0IsSet(true);
      }
      if (incoming.get(8)) {
        struct.right_s1 = iprot.readString();
        struct.setRight_s1IsSet(true);
      }
      if (incoming.get(9)) {
        struct.right_e0 = iprot.readString();
        struct.setRight_e0IsSet(true);
      }
      if (incoming.get(10)) {
        struct.right_e1 = iprot.readString();
        struct.setRight_e1IsSet(true);
      }
      if (incoming.get(11)) {
        struct.right_w0 = iprot.readString();
        struct.setRight_w0IsSet(true);
      }
      if (incoming.get(12)) {
        struct.right_w1 = iprot.readString();
        struct.setRight_w1IsSet(true);
      }
      if (incoming.get(13)) {
        struct.right_w2 = iprot.readString();
        struct.setRight_w2IsSet(true);
      }
    }
  }

}

