/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.dfki.tecs.robot.baxter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RetrievePoseEvent implements org.apache.thrift.TBase<RetrievePoseEvent, RetrievePoseEvent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RetrievePoseEvent");

  private static final org.apache.thrift.protocol.TField POS_FIELD_DESC = new org.apache.thrift.protocol.TField("pos", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ORI_FIELD_DESC = new org.apache.thrift.protocol.TField("ori", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RetrievePoseEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RetrievePoseEventTupleSchemeFactory());
  }

  public Position pos; // required
  public Orientation ori; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POS((short)1, "pos"),
    ORI((short)2, "ori");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POS
          return POS;
        case 2: // ORI
          return ORI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POS, new org.apache.thrift.meta_data.FieldMetaData("pos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class)));
    tmpMap.put(_Fields.ORI, new org.apache.thrift.meta_data.FieldMetaData("ori", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Orientation.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RetrievePoseEvent.class, metaDataMap);
  }

  public RetrievePoseEvent() {
    this.pos = new Position();

    this.ori = new Orientation();

  }

  public RetrievePoseEvent(
    Position pos,
    Orientation ori)
  {
    this();
    this.pos = pos;
    this.ori = ori;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RetrievePoseEvent(RetrievePoseEvent other) {
    if (other.isSetPos()) {
      this.pos = new Position(other.pos);
    }
    if (other.isSetOri()) {
      this.ori = new Orientation(other.ori);
    }
  }

  public RetrievePoseEvent deepCopy() {
    return new RetrievePoseEvent(this);
  }

  @Override
  public void clear() {
    this.pos = new Position();

    this.ori = new Orientation();

  }

  public Position getPos() {
    return this.pos;
  }

  public RetrievePoseEvent setPos(Position pos) {
    this.pos = pos;
    return this;
  }

  public void unsetPos() {
    this.pos = null;
  }

  /** Returns true if field pos is set (has been assigned a value) and false otherwise */
  public boolean isSetPos() {
    return this.pos != null;
  }

  public void setPosIsSet(boolean value) {
    if (!value) {
      this.pos = null;
    }
  }

  public Orientation getOri() {
    return this.ori;
  }

  public RetrievePoseEvent setOri(Orientation ori) {
    this.ori = ori;
    return this;
  }

  public void unsetOri() {
    this.ori = null;
  }

  /** Returns true if field ori is set (has been assigned a value) and false otherwise */
  public boolean isSetOri() {
    return this.ori != null;
  }

  public void setOriIsSet(boolean value) {
    if (!value) {
      this.ori = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POS:
      if (value == null) {
        unsetPos();
      } else {
        setPos((Position)value);
      }
      break;

    case ORI:
      if (value == null) {
        unsetOri();
      } else {
        setOri((Orientation)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POS:
      return getPos();

    case ORI:
      return getOri();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POS:
      return isSetPos();
    case ORI:
      return isSetOri();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RetrievePoseEvent)
      return this.equals((RetrievePoseEvent)that);
    return false;
  }

  public boolean equals(RetrievePoseEvent that) {
    if (that == null)
      return false;

    boolean this_present_pos = true && this.isSetPos();
    boolean that_present_pos = true && that.isSetPos();
    if (this_present_pos || that_present_pos) {
      if (!(this_present_pos && that_present_pos))
        return false;
      if (!this.pos.equals(that.pos))
        return false;
    }

    boolean this_present_ori = true && this.isSetOri();
    boolean that_present_ori = true && that.isSetOri();
    if (this_present_ori || that_present_ori) {
      if (!(this_present_ori && that_present_ori))
        return false;
      if (!this.ori.equals(that.ori))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RetrievePoseEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RetrievePoseEvent typedOther = (RetrievePoseEvent)other;

    lastComparison = Boolean.valueOf(isSetPos()).compareTo(typedOther.isSetPos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos, typedOther.pos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOri()).compareTo(typedOther.isSetOri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ori, typedOther.ori);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RetrievePoseEvent(");
    boolean first = true;

    sb.append("pos:");
    if (this.pos == null) {
      sb.append("null");
    } else {
      sb.append(this.pos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ori:");
    if (this.ori == null) {
      sb.append("null");
    } else {
      sb.append(this.ori);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (pos == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pos' was not present! Struct: " + toString());
    }
    if (ori == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ori' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (pos != null) {
      pos.validate();
    }
    if (ori != null) {
      ori.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RetrievePoseEventStandardSchemeFactory implements SchemeFactory {
    public RetrievePoseEventStandardScheme getScheme() {
      return new RetrievePoseEventStandardScheme();
    }
  }

  private static class RetrievePoseEventStandardScheme extends StandardScheme<RetrievePoseEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RetrievePoseEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pos = new Position();
              struct.pos.read(iprot);
              struct.setPosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ori = new Orientation();
              struct.ori.read(iprot);
              struct.setOriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RetrievePoseEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pos != null) {
        oprot.writeFieldBegin(POS_FIELD_DESC);
        struct.pos.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ori != null) {
        oprot.writeFieldBegin(ORI_FIELD_DESC);
        struct.ori.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RetrievePoseEventTupleSchemeFactory implements SchemeFactory {
    public RetrievePoseEventTupleScheme getScheme() {
      return new RetrievePoseEventTupleScheme();
    }
  }

  private static class RetrievePoseEventTupleScheme extends TupleScheme<RetrievePoseEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RetrievePoseEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.pos.write(oprot);
      struct.ori.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RetrievePoseEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.pos = new Position();
      struct.pos.read(iprot);
      struct.setPosIsSet(true);
      struct.ori = new Orientation();
      struct.ori.read(iprot);
      struct.setOriIsSet(true);
    }
  }

}

