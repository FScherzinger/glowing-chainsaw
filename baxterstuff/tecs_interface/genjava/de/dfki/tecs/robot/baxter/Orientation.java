/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.dfki.tecs.robot.baxter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Orientation implements org.apache.thrift.TBase<Orientation, Orientation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Orientation");

  private static final org.apache.thrift.protocol.TField YAW_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("Yaw_left", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PITCH_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("Pitch_left", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROLL_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("Roll_left", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField YAW_RIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("Yaw_right", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PITCH_RIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("Pitch_right", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ROLL_RIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("Roll_right", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrientationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrientationTupleSchemeFactory());
  }

  public String Yaw_left; // required
  public String Pitch_left; // required
  public String Roll_left; // required
  public String Yaw_right; // required
  public String Pitch_right; // required
  public String Roll_right; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    YAW_LEFT((short)1, "Yaw_left"),
    PITCH_LEFT((short)2, "Pitch_left"),
    ROLL_LEFT((short)3, "Roll_left"),
    YAW_RIGHT((short)4, "Yaw_right"),
    PITCH_RIGHT((short)5, "Pitch_right"),
    ROLL_RIGHT((short)6, "Roll_right");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // YAW_LEFT
          return YAW_LEFT;
        case 2: // PITCH_LEFT
          return PITCH_LEFT;
        case 3: // ROLL_LEFT
          return ROLL_LEFT;
        case 4: // YAW_RIGHT
          return YAW_RIGHT;
        case 5: // PITCH_RIGHT
          return PITCH_RIGHT;
        case 6: // ROLL_RIGHT
          return ROLL_RIGHT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.YAW_LEFT, new org.apache.thrift.meta_data.FieldMetaData("Yaw_left", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PITCH_LEFT, new org.apache.thrift.meta_data.FieldMetaData("Pitch_left", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLL_LEFT, new org.apache.thrift.meta_data.FieldMetaData("Roll_left", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YAW_RIGHT, new org.apache.thrift.meta_data.FieldMetaData("Yaw_right", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PITCH_RIGHT, new org.apache.thrift.meta_data.FieldMetaData("Pitch_right", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLL_RIGHT, new org.apache.thrift.meta_data.FieldMetaData("Roll_right", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Orientation.class, metaDataMap);
  }

  public Orientation() {
    this.Yaw_left = "";

    this.Pitch_left = "";

    this.Roll_left = "";

    this.Yaw_right = "";

    this.Pitch_right = "";

    this.Roll_right = "";

  }

  public Orientation(
    String Yaw_left,
    String Pitch_left,
    String Roll_left,
    String Yaw_right,
    String Pitch_right,
    String Roll_right)
  {
    this();
    this.Yaw_left = Yaw_left;
    this.Pitch_left = Pitch_left;
    this.Roll_left = Roll_left;
    this.Yaw_right = Yaw_right;
    this.Pitch_right = Pitch_right;
    this.Roll_right = Roll_right;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Orientation(Orientation other) {
    if (other.isSetYaw_left()) {
      this.Yaw_left = other.Yaw_left;
    }
    if (other.isSetPitch_left()) {
      this.Pitch_left = other.Pitch_left;
    }
    if (other.isSetRoll_left()) {
      this.Roll_left = other.Roll_left;
    }
    if (other.isSetYaw_right()) {
      this.Yaw_right = other.Yaw_right;
    }
    if (other.isSetPitch_right()) {
      this.Pitch_right = other.Pitch_right;
    }
    if (other.isSetRoll_right()) {
      this.Roll_right = other.Roll_right;
    }
  }

  public Orientation deepCopy() {
    return new Orientation(this);
  }

  @Override
  public void clear() {
    this.Yaw_left = "";

    this.Pitch_left = "";

    this.Roll_left = "";

    this.Yaw_right = "";

    this.Pitch_right = "";

    this.Roll_right = "";

  }

  public String getYaw_left() {
    return this.Yaw_left;
  }

  public Orientation setYaw_left(String Yaw_left) {
    this.Yaw_left = Yaw_left;
    return this;
  }

  public void unsetYaw_left() {
    this.Yaw_left = null;
  }

  /** Returns true if field Yaw_left is set (has been assigned a value) and false otherwise */
  public boolean isSetYaw_left() {
    return this.Yaw_left != null;
  }

  public void setYaw_leftIsSet(boolean value) {
    if (!value) {
      this.Yaw_left = null;
    }
  }

  public String getPitch_left() {
    return this.Pitch_left;
  }

  public Orientation setPitch_left(String Pitch_left) {
    this.Pitch_left = Pitch_left;
    return this;
  }

  public void unsetPitch_left() {
    this.Pitch_left = null;
  }

  /** Returns true if field Pitch_left is set (has been assigned a value) and false otherwise */
  public boolean isSetPitch_left() {
    return this.Pitch_left != null;
  }

  public void setPitch_leftIsSet(boolean value) {
    if (!value) {
      this.Pitch_left = null;
    }
  }

  public String getRoll_left() {
    return this.Roll_left;
  }

  public Orientation setRoll_left(String Roll_left) {
    this.Roll_left = Roll_left;
    return this;
  }

  public void unsetRoll_left() {
    this.Roll_left = null;
  }

  /** Returns true if field Roll_left is set (has been assigned a value) and false otherwise */
  public boolean isSetRoll_left() {
    return this.Roll_left != null;
  }

  public void setRoll_leftIsSet(boolean value) {
    if (!value) {
      this.Roll_left = null;
    }
  }

  public String getYaw_right() {
    return this.Yaw_right;
  }

  public Orientation setYaw_right(String Yaw_right) {
    this.Yaw_right = Yaw_right;
    return this;
  }

  public void unsetYaw_right() {
    this.Yaw_right = null;
  }

  /** Returns true if field Yaw_right is set (has been assigned a value) and false otherwise */
  public boolean isSetYaw_right() {
    return this.Yaw_right != null;
  }

  public void setYaw_rightIsSet(boolean value) {
    if (!value) {
      this.Yaw_right = null;
    }
  }

  public String getPitch_right() {
    return this.Pitch_right;
  }

  public Orientation setPitch_right(String Pitch_right) {
    this.Pitch_right = Pitch_right;
    return this;
  }

  public void unsetPitch_right() {
    this.Pitch_right = null;
  }

  /** Returns true if field Pitch_right is set (has been assigned a value) and false otherwise */
  public boolean isSetPitch_right() {
    return this.Pitch_right != null;
  }

  public void setPitch_rightIsSet(boolean value) {
    if (!value) {
      this.Pitch_right = null;
    }
  }

  public String getRoll_right() {
    return this.Roll_right;
  }

  public Orientation setRoll_right(String Roll_right) {
    this.Roll_right = Roll_right;
    return this;
  }

  public void unsetRoll_right() {
    this.Roll_right = null;
  }

  /** Returns true if field Roll_right is set (has been assigned a value) and false otherwise */
  public boolean isSetRoll_right() {
    return this.Roll_right != null;
  }

  public void setRoll_rightIsSet(boolean value) {
    if (!value) {
      this.Roll_right = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case YAW_LEFT:
      if (value == null) {
        unsetYaw_left();
      } else {
        setYaw_left((String)value);
      }
      break;

    case PITCH_LEFT:
      if (value == null) {
        unsetPitch_left();
      } else {
        setPitch_left((String)value);
      }
      break;

    case ROLL_LEFT:
      if (value == null) {
        unsetRoll_left();
      } else {
        setRoll_left((String)value);
      }
      break;

    case YAW_RIGHT:
      if (value == null) {
        unsetYaw_right();
      } else {
        setYaw_right((String)value);
      }
      break;

    case PITCH_RIGHT:
      if (value == null) {
        unsetPitch_right();
      } else {
        setPitch_right((String)value);
      }
      break;

    case ROLL_RIGHT:
      if (value == null) {
        unsetRoll_right();
      } else {
        setRoll_right((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case YAW_LEFT:
      return getYaw_left();

    case PITCH_LEFT:
      return getPitch_left();

    case ROLL_LEFT:
      return getRoll_left();

    case YAW_RIGHT:
      return getYaw_right();

    case PITCH_RIGHT:
      return getPitch_right();

    case ROLL_RIGHT:
      return getRoll_right();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case YAW_LEFT:
      return isSetYaw_left();
    case PITCH_LEFT:
      return isSetPitch_left();
    case ROLL_LEFT:
      return isSetRoll_left();
    case YAW_RIGHT:
      return isSetYaw_right();
    case PITCH_RIGHT:
      return isSetPitch_right();
    case ROLL_RIGHT:
      return isSetRoll_right();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Orientation)
      return this.equals((Orientation)that);
    return false;
  }

  public boolean equals(Orientation that) {
    if (that == null)
      return false;

    boolean this_present_Yaw_left = true && this.isSetYaw_left();
    boolean that_present_Yaw_left = true && that.isSetYaw_left();
    if (this_present_Yaw_left || that_present_Yaw_left) {
      if (!(this_present_Yaw_left && that_present_Yaw_left))
        return false;
      if (!this.Yaw_left.equals(that.Yaw_left))
        return false;
    }

    boolean this_present_Pitch_left = true && this.isSetPitch_left();
    boolean that_present_Pitch_left = true && that.isSetPitch_left();
    if (this_present_Pitch_left || that_present_Pitch_left) {
      if (!(this_present_Pitch_left && that_present_Pitch_left))
        return false;
      if (!this.Pitch_left.equals(that.Pitch_left))
        return false;
    }

    boolean this_present_Roll_left = true && this.isSetRoll_left();
    boolean that_present_Roll_left = true && that.isSetRoll_left();
    if (this_present_Roll_left || that_present_Roll_left) {
      if (!(this_present_Roll_left && that_present_Roll_left))
        return false;
      if (!this.Roll_left.equals(that.Roll_left))
        return false;
    }

    boolean this_present_Yaw_right = true && this.isSetYaw_right();
    boolean that_present_Yaw_right = true && that.isSetYaw_right();
    if (this_present_Yaw_right || that_present_Yaw_right) {
      if (!(this_present_Yaw_right && that_present_Yaw_right))
        return false;
      if (!this.Yaw_right.equals(that.Yaw_right))
        return false;
    }

    boolean this_present_Pitch_right = true && this.isSetPitch_right();
    boolean that_present_Pitch_right = true && that.isSetPitch_right();
    if (this_present_Pitch_right || that_present_Pitch_right) {
      if (!(this_present_Pitch_right && that_present_Pitch_right))
        return false;
      if (!this.Pitch_right.equals(that.Pitch_right))
        return false;
    }

    boolean this_present_Roll_right = true && this.isSetRoll_right();
    boolean that_present_Roll_right = true && that.isSetRoll_right();
    if (this_present_Roll_right || that_present_Roll_right) {
      if (!(this_present_Roll_right && that_present_Roll_right))
        return false;
      if (!this.Roll_right.equals(that.Roll_right))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Orientation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Orientation typedOther = (Orientation)other;

    lastComparison = Boolean.valueOf(isSetYaw_left()).compareTo(typedOther.isSetYaw_left());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYaw_left()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Yaw_left, typedOther.Yaw_left);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPitch_left()).compareTo(typedOther.isSetPitch_left());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPitch_left()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Pitch_left, typedOther.Pitch_left);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoll_left()).compareTo(typedOther.isSetRoll_left());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoll_left()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Roll_left, typedOther.Roll_left);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYaw_right()).compareTo(typedOther.isSetYaw_right());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYaw_right()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Yaw_right, typedOther.Yaw_right);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPitch_right()).compareTo(typedOther.isSetPitch_right());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPitch_right()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Pitch_right, typedOther.Pitch_right);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoll_right()).compareTo(typedOther.isSetRoll_right());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoll_right()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Roll_right, typedOther.Roll_right);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Orientation(");
    boolean first = true;

    sb.append("Yaw_left:");
    if (this.Yaw_left == null) {
      sb.append("null");
    } else {
      sb.append(this.Yaw_left);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Pitch_left:");
    if (this.Pitch_left == null) {
      sb.append("null");
    } else {
      sb.append(this.Pitch_left);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Roll_left:");
    if (this.Roll_left == null) {
      sb.append("null");
    } else {
      sb.append(this.Roll_left);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Yaw_right:");
    if (this.Yaw_right == null) {
      sb.append("null");
    } else {
      sb.append(this.Yaw_right);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Pitch_right:");
    if (this.Pitch_right == null) {
      sb.append("null");
    } else {
      sb.append(this.Pitch_right);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Roll_right:");
    if (this.Roll_right == null) {
      sb.append("null");
    } else {
      sb.append(this.Roll_right);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrientationStandardSchemeFactory implements SchemeFactory {
    public OrientationStandardScheme getScheme() {
      return new OrientationStandardScheme();
    }
  }

  private static class OrientationStandardScheme extends StandardScheme<Orientation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Orientation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // YAW_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Yaw_left = iprot.readString();
              struct.setYaw_leftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PITCH_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Pitch_left = iprot.readString();
              struct.setPitch_leftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROLL_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Roll_left = iprot.readString();
              struct.setRoll_leftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // YAW_RIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Yaw_right = iprot.readString();
              struct.setYaw_rightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PITCH_RIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Pitch_right = iprot.readString();
              struct.setPitch_rightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROLL_RIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Roll_right = iprot.readString();
              struct.setRoll_rightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Orientation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Yaw_left != null) {
        oprot.writeFieldBegin(YAW_LEFT_FIELD_DESC);
        oprot.writeString(struct.Yaw_left);
        oprot.writeFieldEnd();
      }
      if (struct.Pitch_left != null) {
        oprot.writeFieldBegin(PITCH_LEFT_FIELD_DESC);
        oprot.writeString(struct.Pitch_left);
        oprot.writeFieldEnd();
      }
      if (struct.Roll_left != null) {
        oprot.writeFieldBegin(ROLL_LEFT_FIELD_DESC);
        oprot.writeString(struct.Roll_left);
        oprot.writeFieldEnd();
      }
      if (struct.Yaw_right != null) {
        oprot.writeFieldBegin(YAW_RIGHT_FIELD_DESC);
        oprot.writeString(struct.Yaw_right);
        oprot.writeFieldEnd();
      }
      if (struct.Pitch_right != null) {
        oprot.writeFieldBegin(PITCH_RIGHT_FIELD_DESC);
        oprot.writeString(struct.Pitch_right);
        oprot.writeFieldEnd();
      }
      if (struct.Roll_right != null) {
        oprot.writeFieldBegin(ROLL_RIGHT_FIELD_DESC);
        oprot.writeString(struct.Roll_right);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrientationTupleSchemeFactory implements SchemeFactory {
    public OrientationTupleScheme getScheme() {
      return new OrientationTupleScheme();
    }
  }

  private static class OrientationTupleScheme extends TupleScheme<Orientation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Orientation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetYaw_left()) {
        optionals.set(0);
      }
      if (struct.isSetPitch_left()) {
        optionals.set(1);
      }
      if (struct.isSetRoll_left()) {
        optionals.set(2);
      }
      if (struct.isSetYaw_right()) {
        optionals.set(3);
      }
      if (struct.isSetPitch_right()) {
        optionals.set(4);
      }
      if (struct.isSetRoll_right()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetYaw_left()) {
        oprot.writeString(struct.Yaw_left);
      }
      if (struct.isSetPitch_left()) {
        oprot.writeString(struct.Pitch_left);
      }
      if (struct.isSetRoll_left()) {
        oprot.writeString(struct.Roll_left);
      }
      if (struct.isSetYaw_right()) {
        oprot.writeString(struct.Yaw_right);
      }
      if (struct.isSetPitch_right()) {
        oprot.writeString(struct.Pitch_right);
      }
      if (struct.isSetRoll_right()) {
        oprot.writeString(struct.Roll_right);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Orientation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.Yaw_left = iprot.readString();
        struct.setYaw_leftIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Pitch_left = iprot.readString();
        struct.setPitch_leftIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Roll_left = iprot.readString();
        struct.setRoll_leftIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Yaw_right = iprot.readString();
        struct.setYaw_rightIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Pitch_right = iprot.readString();
        struct.setPitch_rightIsSet(true);
      }
      if (incoming.get(5)) {
        struct.Roll_right = iprot.readString();
        struct.setRoll_rightIsSet(true);
      }
    }
  }

}

