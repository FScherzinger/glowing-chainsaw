/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.dfki.tecs.robot.baxter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Position implements org.apache.thrift.TBase<Position, Position._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Position");

  private static final org.apache.thrift.protocol.TField X_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("X_left", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField Y_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("Y_left", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField Z_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("Z_left", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField X_RIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("X_right", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField Y_RIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("Y_right", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField Z_RIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("Z_right", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PositionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PositionTupleSchemeFactory());
  }

  public String X_left; // required
  public String Y_left; // required
  public String Z_left; // required
  public String X_right; // required
  public String Y_right; // required
  public String Z_right; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    X_LEFT((short)1, "X_left"),
    Y_LEFT((short)2, "Y_left"),
    Z_LEFT((short)3, "Z_left"),
    X_RIGHT((short)4, "X_right"),
    Y_RIGHT((short)5, "Y_right"),
    Z_RIGHT((short)6, "Z_right");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // X_LEFT
          return X_LEFT;
        case 2: // Y_LEFT
          return Y_LEFT;
        case 3: // Z_LEFT
          return Z_LEFT;
        case 4: // X_RIGHT
          return X_RIGHT;
        case 5: // Y_RIGHT
          return Y_RIGHT;
        case 6: // Z_RIGHT
          return Z_RIGHT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.X_LEFT, new org.apache.thrift.meta_data.FieldMetaData("X_left", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.Y_LEFT, new org.apache.thrift.meta_data.FieldMetaData("Y_left", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.Z_LEFT, new org.apache.thrift.meta_data.FieldMetaData("Z_left", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.X_RIGHT, new org.apache.thrift.meta_data.FieldMetaData("X_right", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.Y_RIGHT, new org.apache.thrift.meta_data.FieldMetaData("Y_right", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.Z_RIGHT, new org.apache.thrift.meta_data.FieldMetaData("Z_right", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Position.class, metaDataMap);
  }

  public Position() {
    this.X_left = "";

    this.Y_left = "";

    this.Z_left = "";

    this.X_right = "";

    this.Y_right = "";

    this.Z_right = "";

  }

  public Position(
    String X_left,
    String Y_left,
    String Z_left,
    String X_right,
    String Y_right,
    String Z_right)
  {
    this();
    this.X_left = X_left;
    this.Y_left = Y_left;
    this.Z_left = Z_left;
    this.X_right = X_right;
    this.Y_right = Y_right;
    this.Z_right = Z_right;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Position(Position other) {
    if (other.isSetX_left()) {
      this.X_left = other.X_left;
    }
    if (other.isSetY_left()) {
      this.Y_left = other.Y_left;
    }
    if (other.isSetZ_left()) {
      this.Z_left = other.Z_left;
    }
    if (other.isSetX_right()) {
      this.X_right = other.X_right;
    }
    if (other.isSetY_right()) {
      this.Y_right = other.Y_right;
    }
    if (other.isSetZ_right()) {
      this.Z_right = other.Z_right;
    }
  }

  public Position deepCopy() {
    return new Position(this);
  }

  @Override
  public void clear() {
    this.X_left = "";

    this.Y_left = "";

    this.Z_left = "";

    this.X_right = "";

    this.Y_right = "";

    this.Z_right = "";

  }

  public String getX_left() {
    return this.X_left;
  }

  public Position setX_left(String X_left) {
    this.X_left = X_left;
    return this;
  }

  public void unsetX_left() {
    this.X_left = null;
  }

  /** Returns true if field X_left is set (has been assigned a value) and false otherwise */
  public boolean isSetX_left() {
    return this.X_left != null;
  }

  public void setX_leftIsSet(boolean value) {
    if (!value) {
      this.X_left = null;
    }
  }

  public String getY_left() {
    return this.Y_left;
  }

  public Position setY_left(String Y_left) {
    this.Y_left = Y_left;
    return this;
  }

  public void unsetY_left() {
    this.Y_left = null;
  }

  /** Returns true if field Y_left is set (has been assigned a value) and false otherwise */
  public boolean isSetY_left() {
    return this.Y_left != null;
  }

  public void setY_leftIsSet(boolean value) {
    if (!value) {
      this.Y_left = null;
    }
  }

  public String getZ_left() {
    return this.Z_left;
  }

  public Position setZ_left(String Z_left) {
    this.Z_left = Z_left;
    return this;
  }

  public void unsetZ_left() {
    this.Z_left = null;
  }

  /** Returns true if field Z_left is set (has been assigned a value) and false otherwise */
  public boolean isSetZ_left() {
    return this.Z_left != null;
  }

  public void setZ_leftIsSet(boolean value) {
    if (!value) {
      this.Z_left = null;
    }
  }

  public String getX_right() {
    return this.X_right;
  }

  public Position setX_right(String X_right) {
    this.X_right = X_right;
    return this;
  }

  public void unsetX_right() {
    this.X_right = null;
  }

  /** Returns true if field X_right is set (has been assigned a value) and false otherwise */
  public boolean isSetX_right() {
    return this.X_right != null;
  }

  public void setX_rightIsSet(boolean value) {
    if (!value) {
      this.X_right = null;
    }
  }

  public String getY_right() {
    return this.Y_right;
  }

  public Position setY_right(String Y_right) {
    this.Y_right = Y_right;
    return this;
  }

  public void unsetY_right() {
    this.Y_right = null;
  }

  /** Returns true if field Y_right is set (has been assigned a value) and false otherwise */
  public boolean isSetY_right() {
    return this.Y_right != null;
  }

  public void setY_rightIsSet(boolean value) {
    if (!value) {
      this.Y_right = null;
    }
  }

  public String getZ_right() {
    return this.Z_right;
  }

  public Position setZ_right(String Z_right) {
    this.Z_right = Z_right;
    return this;
  }

  public void unsetZ_right() {
    this.Z_right = null;
  }

  /** Returns true if field Z_right is set (has been assigned a value) and false otherwise */
  public boolean isSetZ_right() {
    return this.Z_right != null;
  }

  public void setZ_rightIsSet(boolean value) {
    if (!value) {
      this.Z_right = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case X_LEFT:
      if (value == null) {
        unsetX_left();
      } else {
        setX_left((String)value);
      }
      break;

    case Y_LEFT:
      if (value == null) {
        unsetY_left();
      } else {
        setY_left((String)value);
      }
      break;

    case Z_LEFT:
      if (value == null) {
        unsetZ_left();
      } else {
        setZ_left((String)value);
      }
      break;

    case X_RIGHT:
      if (value == null) {
        unsetX_right();
      } else {
        setX_right((String)value);
      }
      break;

    case Y_RIGHT:
      if (value == null) {
        unsetY_right();
      } else {
        setY_right((String)value);
      }
      break;

    case Z_RIGHT:
      if (value == null) {
        unsetZ_right();
      } else {
        setZ_right((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case X_LEFT:
      return getX_left();

    case Y_LEFT:
      return getY_left();

    case Z_LEFT:
      return getZ_left();

    case X_RIGHT:
      return getX_right();

    case Y_RIGHT:
      return getY_right();

    case Z_RIGHT:
      return getZ_right();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case X_LEFT:
      return isSetX_left();
    case Y_LEFT:
      return isSetY_left();
    case Z_LEFT:
      return isSetZ_left();
    case X_RIGHT:
      return isSetX_right();
    case Y_RIGHT:
      return isSetY_right();
    case Z_RIGHT:
      return isSetZ_right();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Position)
      return this.equals((Position)that);
    return false;
  }

  public boolean equals(Position that) {
    if (that == null)
      return false;

    boolean this_present_X_left = true && this.isSetX_left();
    boolean that_present_X_left = true && that.isSetX_left();
    if (this_present_X_left || that_present_X_left) {
      if (!(this_present_X_left && that_present_X_left))
        return false;
      if (!this.X_left.equals(that.X_left))
        return false;
    }

    boolean this_present_Y_left = true && this.isSetY_left();
    boolean that_present_Y_left = true && that.isSetY_left();
    if (this_present_Y_left || that_present_Y_left) {
      if (!(this_present_Y_left && that_present_Y_left))
        return false;
      if (!this.Y_left.equals(that.Y_left))
        return false;
    }

    boolean this_present_Z_left = true && this.isSetZ_left();
    boolean that_present_Z_left = true && that.isSetZ_left();
    if (this_present_Z_left || that_present_Z_left) {
      if (!(this_present_Z_left && that_present_Z_left))
        return false;
      if (!this.Z_left.equals(that.Z_left))
        return false;
    }

    boolean this_present_X_right = true && this.isSetX_right();
    boolean that_present_X_right = true && that.isSetX_right();
    if (this_present_X_right || that_present_X_right) {
      if (!(this_present_X_right && that_present_X_right))
        return false;
      if (!this.X_right.equals(that.X_right))
        return false;
    }

    boolean this_present_Y_right = true && this.isSetY_right();
    boolean that_present_Y_right = true && that.isSetY_right();
    if (this_present_Y_right || that_present_Y_right) {
      if (!(this_present_Y_right && that_present_Y_right))
        return false;
      if (!this.Y_right.equals(that.Y_right))
        return false;
    }

    boolean this_present_Z_right = true && this.isSetZ_right();
    boolean that_present_Z_right = true && that.isSetZ_right();
    if (this_present_Z_right || that_present_Z_right) {
      if (!(this_present_Z_right && that_present_Z_right))
        return false;
      if (!this.Z_right.equals(that.Z_right))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Position other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Position typedOther = (Position)other;

    lastComparison = Boolean.valueOf(isSetX_left()).compareTo(typedOther.isSetX_left());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX_left()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.X_left, typedOther.X_left);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY_left()).compareTo(typedOther.isSetY_left());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY_left()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Y_left, typedOther.Y_left);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZ_left()).compareTo(typedOther.isSetZ_left());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZ_left()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Z_left, typedOther.Z_left);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetX_right()).compareTo(typedOther.isSetX_right());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX_right()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.X_right, typedOther.X_right);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY_right()).compareTo(typedOther.isSetY_right());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY_right()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Y_right, typedOther.Y_right);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZ_right()).compareTo(typedOther.isSetZ_right());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZ_right()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Z_right, typedOther.Z_right);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Position(");
    boolean first = true;

    sb.append("X_left:");
    if (this.X_left == null) {
      sb.append("null");
    } else {
      sb.append(this.X_left);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Y_left:");
    if (this.Y_left == null) {
      sb.append("null");
    } else {
      sb.append(this.Y_left);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Z_left:");
    if (this.Z_left == null) {
      sb.append("null");
    } else {
      sb.append(this.Z_left);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("X_right:");
    if (this.X_right == null) {
      sb.append("null");
    } else {
      sb.append(this.X_right);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Y_right:");
    if (this.Y_right == null) {
      sb.append("null");
    } else {
      sb.append(this.Y_right);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Z_right:");
    if (this.Z_right == null) {
      sb.append("null");
    } else {
      sb.append(this.Z_right);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PositionStandardSchemeFactory implements SchemeFactory {
    public PositionStandardScheme getScheme() {
      return new PositionStandardScheme();
    }
  }

  private static class PositionStandardScheme extends StandardScheme<Position> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Position struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // X_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.X_left = iprot.readString();
              struct.setX_leftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // Y_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Y_left = iprot.readString();
              struct.setY_leftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // Z_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Z_left = iprot.readString();
              struct.setZ_leftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // X_RIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.X_right = iprot.readString();
              struct.setX_rightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // Y_RIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Y_right = iprot.readString();
              struct.setY_rightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // Z_RIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Z_right = iprot.readString();
              struct.setZ_rightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Position struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.X_left != null) {
        oprot.writeFieldBegin(X_LEFT_FIELD_DESC);
        oprot.writeString(struct.X_left);
        oprot.writeFieldEnd();
      }
      if (struct.Y_left != null) {
        oprot.writeFieldBegin(Y_LEFT_FIELD_DESC);
        oprot.writeString(struct.Y_left);
        oprot.writeFieldEnd();
      }
      if (struct.Z_left != null) {
        oprot.writeFieldBegin(Z_LEFT_FIELD_DESC);
        oprot.writeString(struct.Z_left);
        oprot.writeFieldEnd();
      }
      if (struct.X_right != null) {
        oprot.writeFieldBegin(X_RIGHT_FIELD_DESC);
        oprot.writeString(struct.X_right);
        oprot.writeFieldEnd();
      }
      if (struct.Y_right != null) {
        oprot.writeFieldBegin(Y_RIGHT_FIELD_DESC);
        oprot.writeString(struct.Y_right);
        oprot.writeFieldEnd();
      }
      if (struct.Z_right != null) {
        oprot.writeFieldBegin(Z_RIGHT_FIELD_DESC);
        oprot.writeString(struct.Z_right);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PositionTupleSchemeFactory implements SchemeFactory {
    public PositionTupleScheme getScheme() {
      return new PositionTupleScheme();
    }
  }

  private static class PositionTupleScheme extends TupleScheme<Position> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Position struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetX_left()) {
        optionals.set(0);
      }
      if (struct.isSetY_left()) {
        optionals.set(1);
      }
      if (struct.isSetZ_left()) {
        optionals.set(2);
      }
      if (struct.isSetX_right()) {
        optionals.set(3);
      }
      if (struct.isSetY_right()) {
        optionals.set(4);
      }
      if (struct.isSetZ_right()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetX_left()) {
        oprot.writeString(struct.X_left);
      }
      if (struct.isSetY_left()) {
        oprot.writeString(struct.Y_left);
      }
      if (struct.isSetZ_left()) {
        oprot.writeString(struct.Z_left);
      }
      if (struct.isSetX_right()) {
        oprot.writeString(struct.X_right);
      }
      if (struct.isSetY_right()) {
        oprot.writeString(struct.Y_right);
      }
      if (struct.isSetZ_right()) {
        oprot.writeString(struct.Z_right);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Position struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.X_left = iprot.readString();
        struct.setX_leftIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Y_left = iprot.readString();
        struct.setY_leftIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Z_left = iprot.readString();
        struct.setZ_leftIsSet(true);
      }
      if (incoming.get(3)) {
        struct.X_right = iprot.readString();
        struct.setX_rightIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Y_right = iprot.readString();
        struct.setY_rightIsSet(true);
      }
      if (incoming.get(5)) {
        struct.Z_right = iprot.readString();
        struct.setZ_rightIsSet(true);
      }
    }
  }

}

